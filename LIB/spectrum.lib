// $Id: spectrum.lib,v 1.4 1999-12-01 13:22:55 Singular Exp $
///////////////////////////////////////////////////////////////////////////////

version="$Id: spectrum.lib,v 1.4 1999-12-01 13:22:55 Singular Exp $";
info="
LIBRARY:  spectrum.lib   PROCEDURES FOR COMPUTING SPECTRA

PROCEDURES:
 spectrum(poly);        spectrum of a isoloated singularity
 spectrum(poly[,1]);    spectrum of a isoloated singularity without tests
          (parameters in square brackets [] are optional)
";

///////////////////////////////////////////////////////////////////////////////

proc spectrum (poly f, list #)
"USAGE:   spectrum(f[,1]);  f polynomial
RETURN:  list
EXAMPLE: example spectrum; shows examples
"
{
  if(size(#)==0)
  {  return(system("spectrum",f)); }
  return (system("spectrum",f,#[1]));
}
example
{ "EXAMPLE:"; echo = 2;
}
///////////////////////////////////////////////////////////////////////////////

proc semic (list s, list ss, list #)
"USAGE:   semic(s,ss[,i]);  s, ss spectra, i int
RETURN:  int
EXAMPLE: example semic; shows examples
"
{
  if(size(#)==0)
  {  return(system("semic",s,ss)); }
  return (system("semic",s,ss,#[1]));
}
example
{ "EXAMPLE:"; echo = 2;
}
///////////////////////////////////////////////////////////////////////////////
proc semicsqh (list s, list ss)
"USAGE:   semicsqh(s,ss);  s, ss spectra, i int
RETURN:  int
EXAMPLE: example semicsqh; shows examples
"
{
  return (system("semic",s,ss,1));
}
example
{ "EXAMPLE:"; echo = 2;
}
///////////////////////////////////////////////////////////////////////////////
proc spadd (list s1, list s2)
"USAGE:   spadd(s1,s2);  s1, s2 spectra
RETURN:  list
EXAMPLE: example spadd; shows examples
"
{
  return (system("spadd",s1,s2));
}
example
{ "EXAMPLE:"; echo = 2;
}
///////////////////////////////////////////////////////////////////////////////
proc spmul (list s, int k)
"USAGE:   spmul(s,k);  s spectrum, k int
RETURN:  list
EXAMPLE: example spmul; shows examples
"
{
  return (system("spmul",s,k));
}
example
{ "EXAMPLE:"; echo = 2;
}
///////////////////////////////////////////////////////////////////////////////
