///////////////////////////////////////////////////////////////////////////////

version="$Id: jordan.lib,v 1.5 1999-01-12 08:53:23 mschulze Exp $";
info="
LIBRARY: jordan.lib  PROCEDURES TO COMPUTE THE JORDAN NORMAL FORM
                     by Mathias Schulze
                     email: mschulze@mathematik.uni-kl.de

 jordan(M[,opt]);    eigenvalues and corresponding jordan block size vectors 
                     of the constant part of the square matrix M and 
                     a jordan basis for the constant part of M
 jordanmatrix(eb);   jordan matrix with eigenvalues eb[1] and corresponding 
                     jordan block size vectors eb[2]
 jordanform(M);      jordan normal form of the constant part
                     of the square matrix M
 invmat(U);          inverse matrix of the invertible constant part 
                     of the matrix U
";

LIB "ring.lib";
///////////////////////////////////////////////////////////////////////////////

proc jordan(matrix M,list #)
USAGE:  <list<ideal,list<intvec>,module>> ret=jordan(<matrix> M[,<int> opt=0]);
ASSUME:  characteristic polynomial of the constant part of M completely 
         factorizable
RETURN:  eigenvalues ret[1] and, if opt<2, corresponding jordan block 
         size vectors ret[2] of the constant part of M and, if opt>0, 
         a jordan basis ret[3] for the constant part of M
EXAMPLE: example jordan; shows an example
{
  // test if square matrix
  int n=nrows(M);
  if(n!=ncols(M))
  {
    "//no square matrix";
    return();
  }

  // get constant part
  def br=basering;
  map zero=br,0;
  M=zero(M);
  kill zero;

  // change to polynomial ring for factorization
  changeord("pr","dp");
  matrix M=imap(br,M);

  // factorize characteristic polynomial
  list l=factorize(det(M-var(1)*freemodule(n)),2);

  // get multiplicities mM
  def eM,mM=l[1..2];
  kill l;

  // test if factorization complete
  int i;
  for(i=size(eM);i>=1;i--)
  {
    if(deg(eM[i])>1)
    {
      kill pr;
      "//unable to factorize characteristic polynomial";
      return();
    }
  }

  // get eigenvalues eM
  map inv=pr,-var(1);
  eM=simplify(inv(eM),1);
  setring br;
  map zero=pr,0;
  ideal eM=zero(eM);
  kill pr;

  // sort eigenvalues
  int j;
  poly e;
  int m;
  for(i=size(eM);i>=2;i--)
  {
    for(j=i-1;j>=1;j--)
    {
      if(eM[i]<eM[j])
      {
        e=eM[i];
        eM[i]=eM[j];
        eM[j]=e;
        m=mM[i];
        mM[i]=mM[j];
        mM[j]=m;
      }
    }
  }
  kill e,m;

  // check option parameter
  int opt=0;
  if(size(#)>0)
  {
    if(typeof(#[1])=="int")
    {
      opt=#[1];
    }
  }

  // define needed variables
  int k,l;
  matrix E=freemodule(n);
  matrix Mi,Ni;
  module sNi;
  list K;
  if(opt>0)
  {
    module V,K1,K2;
    matrix v[n][1];
  }
  if(opt<2)
  {
    list bM;
    intvec bMi;
  }

  // do the following for all eigenvalues eM[i]
  for(i=ncols(eM);i>=1;i--)
  {
    Mi=M-eM[i]*E;

    // compute kernels K of powers of Mi
    K=list(module());
    for(Ni,sNi=Mi,0;size(sNi)<mM[i];Ni=Ni*Mi)
    {
      sNi=syz(Ni);
      K=K+list(sNi);
    }

    if(opt<2)
    {
      // compute jordan block size vector corresponding to eigenvalue eM[i]
      bMi=0;
      bMi[size(K[2])]=0;
      for(j=size(K);j>=2;j--)
      {
        for(k=size(bMi);k>size(bMi)+size(K[j-1])-size(K[j]);k--)
        {
          bMi[k]=bMi[k]+1;
        }
      }
      bM=list(bMi)+bM;
    }

    if(opt>0)
    {
      // compute generating vectors for jordan basis vectors corresponding to 
      // eigenvalue eM[i]
      if(size(K)>1)
      {
        for(j,K1=2,0;j<=size(K)-1;j++)
        {
          K2=K[j];
          K[j]=interred(reduce(K[j],std(K1+module(Mi*K[j+1]))));
          K1=K2;
        }
        K[j]=interred(reduce(K[j],std(K1)));
      }

      // compute jordan basis vectors corresponding to eigenvalue eM[i] from
      // generating vectors
      for(j=size(K);j>=2;j--)
      {
        for(k=size(K[j]);k>=1;k--)
        {
          v=K[j][k];
          for(l=j;l>=1;l--)
          {
            V=module(v)+V;
            v=Mi*v;
          }
        }
      }
    }
  }

  // create return list
  list ret=eM;
  if(opt<2)
  {
    ret[2]=bM;
  }
  if(opt>0)
  {
    ret[3]=V;
  }

  return(ret);
}
example
{
  "EXAMPLE:";
  echo=2;
  ring R=0,x,dp;
  matrix M[3][3]=3,2,1,0,2,1,0,0,3;
  print(M);
  jordan(M);
}
///////////////////////////////////////////////////////////////////////////////

proc jordanmatrix(list eb)
USAGE:   <matrix> J=jordanmatrix(<list<ideal,list<intvec>> eb);
RETURN:  jordan matrix J with eigenvalues eb[1] and corresponding 
         jordan block size vectors eb[2]
EXAMPLE: example jordanmatrix; shows an example
{
  // check parameters
  if(size(eb)<2)
  {
    "//not enough entries in argument list";
    return(); 
  }
  def eJ,bJ=eb[1..2];
  if(typeof(eJ)!="ideal")
  {
    "//first entry in argument list not an ideal";
    return();
  }
  if(typeof(bJ)!="list")
  {
    "//second entry in argument list not a list";
    return();
  }
  if(size(eJ)<size(bJ))
  {
    int s=size(eJ);
  }
  else
  {
    int s=size(bJ);
  }

  // get size of Jordan matrix
  int i,j,k,n;
  for(i=s;i>=1;i--)
  {
    if(typeof(bJ[i])!="intvec")
    {
      "//second entry in argument list not a list of intvecs";
      return();
    }
    else
    {
      for(j=size(bJ[i]);j>=1;j--)
      {
        k=bJ[i][j];
        if(k>0)
        {
          n=n+k;
        }
      }
    }
  }
  matrix J[n][n];

  // create Jordan matrix
  int l;
  for(i,l=1,1;i<=s;i++)
  {
    for(j=1;j<=size(bJ[i]);j++)
    {
      k=bJ[i][j];
      if(k>0)
      {
        while(k>=2)
        {
          J[l,l]=eJ[i];
          J[l,l+1]=1;
          k,l=k-1,l+1;
        }
        J[l,l]=eJ[i];
        l++;
      }
    }
  }

  return(J);
}
example
{
  "EXAMPLE:";
  echo=2;
  ring R=0,x,dp;
  print(jordanmatrix(list(ideal(2,3),list(intvec(1),intvec(2)))));
}
///////////////////////////////////////////////////////////////////////////////

proc jordanform(matrix M)
USAGE:   <matrix> J=jordanform(<matrix> M);
ASSUME:  characteristic polynomial of the constant part of M completely
         factorizable
RETURN:  jordan normal form J of the constant part of M
EXAMPLE: example jordanform; shows an example
{
  return(jordanmatrix(jordan(M)));
}
example
{
  "EXAMPLE:";
  echo=2;
  ring R=0,x,dp;
  matrix M[3][3]=3,2,1,0,2,1,0,0,3;
  print(M);
  print(jordanform(M));
}
///////////////////////////////////////////////////////////////////////////////

proc invmat(matrix U)
USAGE:   <matrix> invU=invmat(<matrix> U);
ASSUME:  constant part of U invertible
RETURN:  inverse matrix invU of the constant part of U
EXAMPLE: example invmat; shows an example
{
  // test if square matrix
  int n=nrows(U);
  if(n!=ncols(U))
  {
    "//no square matrix";
    return();
  }

  // get constant part
  def br=basering;
  map zero=br,0;
  U=zero(U);

  // compute inverse
  return(lift(U,freemodule(n)));
}
example
{
  "EXAMPLE:";
  echo=2;
  ring R=0,x,dp;
  matrix U[3][3]=3,2,1,0,2,1,0,0,3;
  print(U);
  print(invmat(U));
}
///////////////////////////////////////////////////////////////////////////////
