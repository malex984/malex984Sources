#################################################################
###
### Makefile for Singular
###
#################################################################

SHELL		= /bin/sh

##
## version
##
SINGULAR_VERSION	= @SINGULAR_VERSION@
SINGULAR		= @SINGULAR@
SINGUNAME		= @SINGUNAME@
EXEC_EXT		= @EXEC_EXT@
##
## various paths
##
srcdir		= @srcdir@
prefix 		= @prefix@
exec_prefix 	= @exec_prefix@
libdir 		= @libdir@
# program executable goes here
bindir		= @bindir@
# includes are taken from here
includedir	= @includedir@
slibdir		= ${prefix}/LIB
install_bindir  = ${install_prefix}/${SINGUNAME}
install_slibdir = ${install_prefix}/LIB

##
## various programs
##
@SET_MAKE@
CC		= @CC@
LD              = @LD@
CXX		= @CXX@
LEX		= @LEX@
PERL		= @PERL@
BISON		= bison
INSTALL		= @INSTALL@
INSTALL_PROGRAM	= @INSTALL_PROGRAM@ 
INSTALL_DATA	= @INSTALL_DATA@
MKINSTALLDIRS   = ./mkinstalldirs
LN_S		= @LN_S@

##
## compiler and linker options
##
PIPE		= @PIPE@
CFLAGS		= @CFLAGS@ ${PIPE}
CXXFLAGS	= @CXXFLAGS@ ${PIPE}
CXXTEMPLFLAGS	= @CXXTEMPLFLAGS@
CPPFLAGS	= -I${srcdir} @CPPFLAGS@
DEFS		= -DNDEBUG -DOM_NDEBUG -D@SING_UNAME@ @DEFS@
LDFLAGS		= @LDFLAGS@
LD_DYN_FLAGS	= @LD_DYN_FLAGS@
SFLAGS		= @SFLAGS@
SLDFLAGS	= @SLDFLAGS@

LD_LIBC	        = -lc
STATIC_LDFLAGS	= @STATIC_LDFLAGS@
# under cygwin, do not explicitly link against -lm, for it is the cygwin
# lib -- if you really want to do this, use -lm as the _last_ thing on the
# arguments to link
ifneq ($(SINGUNAME),ix86-Win)
LIBS		= -lm @NEED_LIBS@ 
else
LIBS		= -lsingfac -lsingcf -lgmp -static -lgdbm -lreadline -lncurses
endif
MP_LIBS		= @MP_LIBS@
DL_KERNEL	= @DL_KERNEL@
HAVE_MPSR       = @HAVE_MPSR@

ifdef LD_STATIC
LDFLAGS  := ${STATIC_LDFLAGS} ${LDFLAGS} 
SING_EXEC = Singular-static
LIBS := ${MP_LIBS} ${LIBS} 
DL_KERNEL =
else
LDFLAGS  := ${LD_DYN_FLAGS} ${LDFLAGS} 
SING_EXEC = Singular
endif

# CXXFLAGS =  -g -Wall -Wno-unused
# CFLAGS =  -g -Wall -Wno-unused
##
## End configuration dependend stuff
#################################################################

###
### file sets
###

# normal C++ source files
CXXSOURCES=grammar.cc scanner.cc algmap.cc attrib.cc clapconv.cc \
    clapsing.cc mminit.cc\
    extra.cc febase.cc feread.cc fehelp.cc feResource.cc feOpt.cc \
    ffields.cc hdegree.cc hilb.cc hutil.cc \
    gring.cc gr_kstd2.cc\
    ideals.cc intvec.cc \
    ipassign.cc ipconv.cc ipid.cc iplib.cc \
    ipprint.cc ipshell.cc khstd.cc kstdfac.cc \
    kstd1.cc kstd2.cc kutil.cc lists.cc \
    longalg.cc longrat.cc longrat0.cc \
    maps.cc matpol.cc sdb.cc gnumpfl.cc gnumpc.cc \
    modulop.cc mpr_complex.cc sparsmat.cc \
    fglm.cc fglmzero.cc fglmvec.cc fglmgauss.cc fglmhom.cc fglmcomb.cc \
    numbers.cc polys.cc p_polys.cc polys0.cc polys1.cc polys-impl.cc \
    ring.cc shortfl.cc silink.cc kspoly.cc \
    subexpr.cc syz.cc syz0.cc syz1.cc syz2.cc syz3.cc\
    timer.cc weight.cc \
    GMPrat.cc multicnt.cc npolygon.cc semic.cc spectrum.cc splist.cc \
    libparse.cc mod_raw.cc sing_win.cc\
    pcv.cc units.cc eigenval.cc kbuckets.cc sbuckets.cc\
    mpr_inout.cc mpr_base.cc mpr_numeric.cc \
    prCopy.cc p_Mult_q.cc \
    pDebug.cc pInline2.cc pInline1.cc pInline0.cc \
    pShallowCopyDelete.cc  cntrlc.cc misc.cc

# stuff for MP
MPSR_SOURCES = mpsr_Put.cc mpsr_PutPoly.cc mpsr_GetPoly.cc mpsr_sl.cc\
	mpsr_Get.cc mpsr_GetMisc.cc mpsr_Error.cc \


# stuff for dbm
DBMSR_SOURCES =  ndbm.cc sing_dbm.cc

# normal C source files
CSOURCES=weight0.c fegetopt.c fereadl.c page.c dError.c mmstd.c 

# C++ sources which are used if part of the kernel are dynamically linked
DL_KERNEL_SOURCES=p_Procs_Dynamic.cc slInit_Dynamic.cc 

# C++ sources which are used for dynamic libraries if part of the kernel is
# dynamically linked
DL_LIB_SOURCES=p_Procs_Lib.cc 

# C++ sources which are used if no parts of the kernel are dynamically linked
STATIC_SOURCES=p_Procs_Static.cc slInit_Static.cc 

# C++ sources for which both, shared and static object files are needed
COMMON_SOURCES = $(MPSR_SOURCES) $(DBMSR_SOURCES)

# special C++ source files (need extra compiling and/or linking), for which
# dependencies should be generated
ESOURCES=mmalloc.cc iparith.cc $(COMMON_SOURCES) \
	$(DL_KERNEL_SOURCES) $(DL_LIB_SOURCES) $(STATIC_SOURCES) 

SOURCES=${CSOURCES} ${CXXSOURCES} \
	grammar.y scanner.l libparse.l syz2.cc prCopyTemplate.cc \
        p_Delete__T.cc p_ShallowCopyDelete__T.cc \
        p_Copy__T.cc p_Mult_nn__T.cc  pp_Mult_nn__T.cc \
        pp_Mult_mm__T.cc p_Mult_mm__T.cc \
        p_Minus_mm_Mult_qq__T.cc p_Add_q__T.cc \
	p_Neg__T.cc pp_Mult_Coeff_mm_DivSelect__T.cc \
	pp_Mult_Coeff_mm_DivSelectMult__T.cc \
	p_Merge_q__T.cc pp_Mult_mm_Noether__T.cc\
	p_kBucketSetLm__T.cc \
	kInline.cc utils.cc utils.h febase.inc \
	tesths.cc mpsr_Tok.cc claptmpl.cc 

HEADERS=algmap.h hutil.h lists.h stairc.h attrib.h ideals.h \
	longalg.h mpsr_Tok.h structs.h intvec.h longrat.h \
	numbers.h stype.h clapconv.h ipconv.h maps.h page.h \
	subexpr.h clapsing.h ipid.h matpol.h polys.h p_polys.h syz.h \
	cntrlc.h ipprint.h ring.h timer.h sdb.h dError.h \
	febase.h ipshell.h shortfl.h tok.h mpr_complex.h mpr_global.h \
	page.h gring.h \
	ffields.h khstd.h silink.h sparsmat.h gnumpfl.h gnumpc.h \
	fglm.h kstd1.h modulop.h sing_dbm.h weight.h \
	fglmgauss.h fglmvec.h mpsr.h mpsr_sl.h\
	kstdfac.h mpsr_Get.h kmatrix.h\
	kutil.h mpsr_Put.h\
	ndbm.h dbm_sl.h polys-impl.h libparse.h \
        GMPrat.h multicnt.h npolygon.h semic.h spectrum.h splist.h multicnt.h \
	pcv.h units.h eigenval.h mod_raw.h kbuckets.h sbuckets.h\
	mpr_global.h mpr_inout.h mpr_base.h mpr_numeric.h \
	feOpt.h fegetopt.h distrib.h walk.h \
	prCopy.h prCopyMacros.h \
        p_MemAdd.h p_MemCopy.h p_MemCmp.h p_Numbers.h \
        pInline2.h pInline1.h pInline0.h mmalloc.h static.h\
        omSingularConfig.h pShallowCopyDelete.h \
	p_Procs_Dynamic.h p_Procs_Impl.h p_Procs_Set.h \
	p_Procs.h p_Procs_Static.h p_Mult_q.h

DISTFILES=${SOURCES} ${HEADERS} ${ESOURCES} \
        Makefile.in configure.in configure \
	mod2.h.in grammar.h testgh install-sh mkinstalldirs \
	check_aso.pl prCopy.pl

OBJS := $(CXXSOURCES:.cc=.o) $(CSOURCES:.c=.o)

ifeq ($(SINGUNAME),ix86-Win)
OBJS := $(OBJS) Singular_res.o
endif

P_PROCS_MODULES = FieldZp FieldIndep FieldQ FieldGeneral

ifeq ($(DL_KERNEL),1)
OBJS 	:= $(OBJS) $(DL_KERNEL_SOURCES:.cc=.o)
DBMSR_SO= dbmsr.so
DL_LIBS := $(P_PROCS_MODULES:%=p_Procs_%.so) $(DBMSR_SO)
ifeq ($(HAVE_MPSR), 1)
MPSR_SO	=	mpsr.so
DL_LIBS := 	$(DL_LIBS) $(MPSR_SO)
endif
else
ifndef LD_STATIC
LIBS := $(MP_LIBS) $(LIBS)
endif
OBJS := $(OBJS) $(STATIC_SOURCES:.cc=.o) $(COMMON_SOURCES:.cc=.o)
DL_LIBS=
endif

#
# Singular libraries which go into distribution
# MAKE SURE THAT THIS IS UP_TO_DATE
#
SLIBS = COPYING \
	ainvar.lib   algebra.lib   all.lib       brnoeth.lib    classify.lib \
        deform.lib   elim.lib      equising.lib  finvar.lib     gaussman.lib \
        general.lib  graphics.lib  hnoether.lib  homolog.lib    inout.lib \
        intprog.lib  latex.lib     linalg.lib    makedbm.lib    matrix.lib \
	mprimdec.lib \
        mondromy.lib mregular.lib  normal.lib    ntsolve.lib    paramet.lib \
        poly.lib     presolve.lib  primdec.lib   primitiv.lib   qhmoduli.lib \
        random.lib   reesclos.lib  ring.lib      rinvar.lib     sing.lib \
        solve.lib    spcurve.lib   spectrum.lib  standard.lib   stratify.lib \
        surf.lib     toric.lib     triang.lib    zeroset.lib

SLIBS_FILES = $(addprefix LIB/,${SLIBS})

GFTABLES = $(wildcard LIB/gftables/[1-9]*)

##
## Build Targets
##
.l.cc:
	@if test "x${LEX}" = x; then \
		echo Error: no lex given, could not rebuilt scanner.cc;\
                exit 1; \
	fi
	${LEX} -s -I -t $< > scanner.cc
.y.cc:
	@if test "x${BISON}" = x; then \
		echo Error: no bison given, could not rebuilt grammar.cc;\
                exit 1; \
	fi
	${BISON} -d -t -o grammar.cc $<
	chmod +x testgh
	./testgh

.cc.o:	
	${CXX} ${CXXFLAGS} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFS} -c $<
.c.o:
	${CC} ${CFLAGS} ${CPPFLAGS} ${DEFS} -c $<

# building objects for shared libraries
p_Procs_Lib_%.dl_o : p_Procs_Lib.cc p_Procs_Dynamic.o 
	${CXX} ${CXXFLAGS} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFS} ${SFLAGS} -Dp_Procs_$* -c $< -o $@

%.dl_o : %.cc
	${CXX} ${CXXFLAGS} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFS} ${SFLAGS} -c $< -o $@


all:	$(SING_EXEC)

Singular-static: version.h
	sleep 1
	echo "#define HAVE_STATIC" > static.h
	${MAKE} LD_STATIC=1 S_EXT="-static" Singular-static
	echo "#undef HAVE_STATIC" > static.h

Singular${S_EXT}: mod2.h Makefile version.h scanner.cc  ${OBJS} mmalloc.o \
          iparith.o tesths.cc libparse.cc claptmpl.o mpsr_Tok.o $(DL_LIBS)
	${CXX} ${CXXFLAGS} ${CPPFLAGS} ${CXXTEMPLFLAGS} ${DEFS} \
	  -o Singular${S_EXT} \
	  tesths.cc iparith.o mpsr_Tok.o claptmpl.o\
	  ${OBJS} ${LDFLAGS} ${LIBS} -lomalloc_ndebug mmalloc.o

%.static: version.h
	${MAKE} DL_KERNEL=0 S_EXT=".static" $@

iparith.o mpsr_Tok.o : iparith.inc mpsr_Tok.inc

cntrlc.o cntrlc.og : feOptES.inc feOptTS.inc feOpt.inc

p_Procs_Lib.o: p_Procs_Lib.inc

claptmpl.o: claptmpl.cc mod2.h
	${CXX} ${CXXFLAGS}  ${CPPFLAGS} ${DEFS} -c $<	

iparith.inc mpsr_Tok.inc: claptmpl.o iparith.cc mmalloc.o\
                          ipconv.cc tok.h mpsr_Tok.cc grammar.h mod2.h
	${CXX} ${CXXFLAGS} ${CPPFLAGS} ${CXXTEMPLFLAGS} ${DEFS} -DGENTABLE \
	     -o gentable claptmpl.o iparith.cc tesths.cc mpsr_Tok.cc \
	     ${OBJS} ${LDFLAGS} ${LIBS} -lomalloc_ndebug mmalloc.o
	./gentable
	/bin/rm -f gentable gentable.exe


version.h: ${SOURCES} ${HEADERS} Makefile.in mod2.h.in \
           configure.in
	echo "#define feVersionId "  `date '+%Y%m%d%H'` >version.h

libparse: libparse_main.o utils.o fegetopt.o febase.cc
	${CXX}  -DSTANDALONE_PARSER -o libparse febase.cc libparse_main.o utils.o fegetopt.o

libparse_main.o: libparse.cc
	${CXX} -c -o libparse_main.o libparse.cc  -DSTANDALONE_PARSER

libparse.cc: libparse.l
	@if test "x${LEX}" = x; then \
		echo Error: no lex given, could not rebuilt libparse.cc;\
                exit 1; \
	fi
	${LEX} -I -Pyylp -olibparse.cc libparse.l

# Hmm compiling with -fomit-frame-pointer resulted in access violation
# under cygwin
ESingular: fegetopt.o feResource.cc mod2.h feOpt.cc version.h emacs.cc \
           feOptES.inc mmalloc.o
	${CXX} -O2 ${CPPFLAGS} ${DEFS} -DESINGULAR -o ESingular emacs.cc fegetopt.o \
	${LDFLAGS} ${LIBS} -lomalloc_ndebug mmalloc.o

TSingular: fegetopt.o feResource.cc mod2.h feOpt.cc version.h emacs.cc \
           feOptTS.inc mmalloc.o
	${CXX} -O2 ${CPPFLAGS} ${DEFS} -DTSINGULAR -o TSingular emacs.cc fegetopt.o \
	${LDFLAGS}  ${LIBS} -lomalloc_ndebug mmalloc.o

feOpt.o: feOpt.inc feOptES.inc feOptTS.inc

feOpt.inc: feOpt.cc mod2.h feOpt.h
	$(CXX) -DGENERATE_OPTION_INDEX feOpt.cc -o feOpt
	./feOpt
	/bin/rm -f feOpt feOpt.exe

feOptES.inc: feOpt.cc mod2.h feOpt.h
	$(CXX) -DGENERATE_OPTION_INDEX  -DESINGULAR feOpt.cc -o feOpt
	./feOpt
	rm -f feOpt feOpt.exe

feOptTS.inc: feOpt.cc mod2.h feOpt.h
	$(CXX) -DGENERATE_OPTION_INDEX  -DTSINGULAR feOpt.cc -o feOpt
	./feOpt
	rm -f feOpt feOpt.exe

prCopy.o: prCopy.inc

prCopy.inc : prCopyMacros.h prCopyTemplate.cc prCopy.pl
	$(PERL) prCopy.pl > prCopy.inc

# additional dependencies for p_Procs_[Static|Dynamic|Lib].cc
p_Procs_Static.o: p_Procs_Static.inc 
p_Procs_Static.inc: p_Procs_Static.h 
p_Procs_Dynamic.o p_Procs_Lib.o: p_Procs_Dynamic.inc
p_Procs_Dynamic.inc p_Procs_Lib.inc: p_Procs_Dynamic.h

# here is how p_Procs_[Static|Dynamic].inc is generated
p_Procs_%.inc: p_Procs_Generate.cc p_Procs_Impl.h mod2.h 
	$(CXX) -g -Wall -Dp_Procs_$* p_Procs_Generate.cc -o p_Procs_$*
	./p_Procs_$* > p_Procs_$*.inc
	-rm -f p_Procs_$* p_Procs_$*.exe

p_Procs_%.so: p_Procs_Lib_%.dl_o
	$(LD) ${SLDFLAGS} -o $@ $^

mpsr.so: $(MPSR_SOURCES:.cc=.dl_o)
	$(LD) ${SLDFLAGS} -o $@ $^ -L${libdir} ${MP_LIBS}

dbmsr.so: $(DBMSR_SOURCES:.cc=.dl_o)
	$(LD) ${SLDFLAGS} -o $@ $^

src: scanner.cc grammar.h grammar.cc libparse.cc 

mod2.h: stamp-h

stamp-h : config.status mod2.h.in
	CONFIG_FILES= CONFIG_HEADERS="mod2.h" ./config.status

Makefile: Makefile.in config.status
	CONFIG_FILES="Makefile" CONFIG_HEADERS= ./config.status

config.status: configure
	./config.status --recheck

configure: configure.in
	@echo "WARNING: You need to rerun autoconf. I am proceeding, for now."
	@touch configure
#	autoconf

ifeq ($(SINGUNAME),ix86-Win)
##
## windows only targets
##

## resources
Singular.rc: Singular.rc.in config.status
	CONFIG_FILES="Singular.rc" CONFIG_HEADERS= ./config.status

ESingular_res.o: Singular.rc
	windres -DESINGULAR -i Singular.rc -o ESingular_res.o

TSingular_res.o: Singular.rc
	windres -DTSINGULAR -i Singular.rc -o TSingular_res.o

Singular_res.o: Singular.rc
	windres -DSINGULAR -i Singular.rc -o Singular_res.o

## run
run.o: run.c run.h
	gcc -c -I. -O2 run.c -o run.o

runTSingular : run.o TSingular_res.o
	gcc -mwindows -e _mainCRTStartup run.o TSingular_res.o -o runTSingular.exe

runESingular : run.o ESingular_res.o
	gcc -mwindows -e _mainCRTStartup run.o ESingular_res.o -o runESingular.exe

RUN_SINGULARS=runESingular runTSingular

endif

##
## install targets
##
install: all installbin installslib

installbin: ${SING_EXEC} libparse ESingular TSingular ${RUN_SINGULARS}
	${MKINSTALLDIRS} ${bindir}
	${INSTALL_PROGRAM} ${SING_EXEC} ${SINGULAR}
	${INSTALL_PROGRAM} libparse ${RUN_SINGULARS} ${bindir}
	${INSTALL_PROGRAM} ESingular TSingular ${DL_LIBS} ${bindir}
	chmod a+x ${SINGULAR}
	rm -f ${bindir}/${SING_EXEC}${EXEC_EXT}
	cd ${bindir}; ${LN_S} ${SINGULAR} Singular${EXEC_EXT};

installslib: LIB
	test -r ${slibdir} || ${LN_S} `pwd`/LIB ${slibdir}


uninstall: uninstallbin

uninstallbin:
	rm -f ${bindir}/Singular${EXEC_EXT} 
	rm -f ${SINGULAR}
	-rmdir ${bindir}

##
## clean targest
##
mostlyclean: 
	-rm -f Singular Singular-static Singulara Singularg Singularp Singularb libparse feOpt*.inc p_Procs_*.inc
	-rm -f *.o *.og core *.op *.ob *.ot Singulart *.od *_d.cc *_d.c p_Procs *.oa *.dl_o* *.so*
	-rm -f ESingular* TSingular*

clean: mostlyclean
	-rm -f *.bak *.d *.dd depend 
	-rm -f ${slibdir}

distclean: clean
	-rm -f iparith.inc mpsr_Tok.inc stamp.h 
	-rm -f Singular* *.gprof *.bprof *~ .\#* version.h
	-rm -f mod2.h Makefile TAGS* tags config.status config.cache config.log

srcclean:
	@echo "This command is intended for maintainers to use;"
	@echo "Rebuilding the deleted files requires flex"
	@echo "bison, perl"
	-rm -f scanner.cc grammar.h grammar.cc libparse.cc

maintainer-clean: distclean srcclean
	@echo "This command is intended for maintainers to use;"
	@echo "Rebuilding the deleted files requires flex"
	@echo "bison, perl and autoconf"
	-rm configure

##
## miscellanous targets
##

install-bindist: $(HEADERS) $(SOURCES) Makefile depend
	echo "#define MAKE_DISTRIBUTION	" > distrib.h
	sleep 1
	${MAKE} ${SING_EXEC} ESingular TSingular libparse ${RUN_SINGULARS}
	${MKINSTALLDIRS} ${install_bindir} 
	${INSTALL_PROGRAM} -s  ${SING_EXEC} ${install_bindir}/Singular
	${INSTALL_PROGRAM} -s  libparse ${RUN_SINGULARS} ESingular TSingular ${DL_LIBS} ${install_bindir}
	echo "#undef MAKE_DISTRIBUTION " > distrib.h

install-sharedist: ${SLIBS_FILES} LIB/gftables
	${MKINSTALLDIRS} ${install_slibdir}
	cp ${SLIBS_FILES} ${install_slibdir}
	${MKINSTALLDIRS} ${install_slibdir}/gftables
	cp ${GFTABLES} ${install_slibdir}/gftables
	chmod -R +rX ${install_slibdir}/*

tar:
	tar cf Singular-${SINGULAR_VERSION}-src.tar ${DISTFILES}
	gzip -f Singular-${SINGULAR_VERSION}-src.tar

backup: tar
	mcopy -o Singular-${SINGULAR_VERSION}-src.tar.gz a:

TAGS:   ${SOURCES} ${ESOURCES} ${HEADERS} 
	etags ${SOURCES} ${ESOURCES} ${HEADERS}

tags:   
	ctags *.y *.l *.c *.h *.cc *.inc

echoLIBS:
	@echo ${SLIBS}

##
## Below here is stuff for developpers
#################################################################


##
## .og files for having -O and -g object versions available at the same time
##

OBJG1 := $(CXXSOURCES:.cc=.og) 
OBJG2 := $(CSOURCES:.c=.og) 

OBJP1 := $(CXXSOURCES:.cc=.op) 
OBJP2 := $(CSOURCES:.c=.op) 

OBJB1 := $(CXXSOURCES:.cc=.ob) 
OBJB2 := $(CSOURCES:.c=.ob) 

OBJT1 := $(CXXSOURCES:.cc=.ot) 
OBJT2 := $(CSOURCES:.c=.ot) 

OBJA1 := $(CXXSOURCES:.cc=.oa) 
OBJA2 := $(CSOURCES:.c=.oa) 


OBJG=$(OBJG1) $(OBJG2) 
OBJP=$(OBJP1) $(OBJP2)
OBJB=$(OBJB1) $(OBJB2)
OBJT=$(OBJT1) $(OBJT2)
OBJA=$(OBJA1) $(OBJA2)

DL_TAILG=\"sog\"
DL_TAILP=\"sop\"
DL_TAILB=\"sob\"
DL_TAILT=\"sot\"
DL_TAILA=\"soa\"


ifeq ($(DL_KERNEL),1)

OBJG := $(OBJG) $(DL_KERNEL_SOURCES:.cc=.og)
DL_LIBSG := $(P_PROCS_MODULES:%=p_Procs_%.sog) $(MPSR_SO:%.so=%.sog) $(DBMSR_SO:%.so=%.sog)

OBJP := $(OBJP) $(DL_KERNEL_SOURCES:.cc=.op)
DL_LIBSP := $(P_PROCS_MODULES:%=p_Procs_%.sop) $(MPSR_SO:%.so=%.sop) $(DBMSR_SO:%.so=%.sop)

OBJB := $(OBJB) $(DL_KERNEL_SOURCES:.cc=.ob)
DL_LIBSB := $(P_PROCS_MODULES:%=p_Procs_%.sob) $(MPSR_SO:%.so=%.sob) $(DBMSR_SO:%.so=%.sob)

OBJT := $(OBJT) $(DL_KERNEL_SOURCES:.cc=.ot)
DL_LIBST := $(P_PROCS_MODULES:%=p_Procs_%.sot) $(MPSR_SO:%.so=%.sot) $(DBMSR_SO:%.so=%.sot)

OBJA := $(OBJA) $(DL_KERNEL_SOURCES:.cc=.oa)
DL_LIBSA := $(P_PROCS_MODULES:%=p_Procs_%.soa) $(MPSR_SO:%.so=%.soa) $(DBMSR_SO:%.so=%.soa)

else

OBJG := $(OBJG) $(STATIC_SOURCES:.cc=.og) $(COMMON_SOURCES:.cc=.og)
DL_LIBSG=

OBJP := $(OBJP) $(STATIC_SOURCES:.cc=.op) $(COMMON_SOURCES:.cc=.op)
DL_LIBSP=

OBJB := $(OBJB) $(STATIC_SOURCES:.cc=.ob) $(COMMON_SOURCES:.cc=.ob)
DL_LIBSB=

OBJT := $(OBJT) $(STATIC_SOURCES:.cc=.ot) $(COMMON_SOURCES:.cc=.ot)
DL_LIBST=

OBJA := $(OBJA) $(STATIC_SOURCES:.cc=.oa) $(COMMON_SOURCES:.cc=.oa)
DL_LIBST=

endif


##
## compiler and linker options for debug version
##

CCG		= gcc
CXXG		= gcc
CXXM		= gcc -MM -MG -DGENERATE_DEPEND
CCM		= gcc -MM -MG -DGENERATE_DEPEND

CFLAGSG		= -g -Wall -Wno-unused ${PIPE}
CXXFLAGSG	= -g -Wall -Wno-unused ${PIPE}
CXXTEMPLFLAGSG	= -fno-implicit-templates
DEFSG		= -D@SING_UNAME@ @DEFS@ -DDL_TAIL=$(DL_TAILG)

##
## Debug Targets
##

p_Procs_%.sog: p_Procs_Lib_%.dl_og 
	${CXXG} ${CXXFLAGSG} ${SFLAGS} ${SLDFLAGS} $< -o $@

p_Procs_Lib_%.dl_og : p_Procs_Lib.cc  p_Procs_Dynamic.og
	${CXXG} ${CXXFLAGSG} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFSG} ${SFLAGS} -Dp_Procs_$* -c $< -o $@

%.dl_og: %.cc
	${CXXG} ${CXXFLAGSG} ${CXXTEMPLFLAGSG} ${CPPFLAGS} ${DEFSG} ${SFLAGS} -c $< -o $@

mpsr.sog: $(MPSR_SOURCES:.cc=.dl_og)
	${CXXG} ${CXXFLAGSG} ${SFLAGS} ${SLDFLAGS} ${LDFLAGS} -o $@ $^ ${MP_LIBS}

dbmsr.sog: $(DBMSR_SOURCES:.cc=.dl_og)
	${CXXG} ${CXXFLAGSG} ${SFLAGS} ${SLDFLAGS} ${LDFLAGS} -o $@ $^ ${MP_LIBS}

claptmpl.og: claptmpl.cc mod2.h
	$(CXXG)  ${CXXFLAGSG} ${CPPFLAGS} ${DEFSG} -c $< -o $@

%.og: %.cc
	$(CXXG) ${CXXFLAGSG} ${CXXTEMPLFLAGSG} ${CPPFLAGS} ${DEFSG} -c $< -o $@

$(OBJG2) : %.og: %.c
	$(CCG)  ${CFLAGSG} ${CPPFLAGS} ${DEFSG} -c $< -o $@

Singularg${S_EXT}: scanner.cc  $(OBJG)  mmalloc.og $(DL_LIBSG)\
           iparith.og mpsr_Tok.og claptmpl.og tesths.cc version.h 
	$(CXXG) ${CXXFLAGSG} ${CXXTEMPLFLAGSG} ${CPPFLAGS} ${DEFSG} -o Singularg${S_EXT} \
	tesths.cc iparith.og mpsr_Tok.og claptmpl.og $(OBJG) ${LDFLAGS} ${LIBS} -lomalloc mmalloc.og \
	${LD_DYN_FLAGS} ${LD_LIBC}

iparith.og: iparith.inc iparith.cc
	$(CXXG)  ${CXXFLAGSG} ${CXXTEMPLFLAGSG} ${CPPFLAGS} ${DEFSG} -c iparith.cc -o iparith.og

mpsr_Tok.og: iparith.inc mpsr_Tok.cc
	$(CXXG) ${CXXFLAGSG} ${CPPFLAGS} ${CXXTEMPLFLAGSG} ${DEFSG} -c mpsr_Tok.cc -o mpsr_Tok.og

installg: Singularg
	${MKINSTALLDIRS} ${bindir}
	${INSTALL_PROGRAM} Singularg ${bindir}	

ESingularg: fegetopt.og feResource.cc mod2.h feOpt.cc version.h emacs.cc \
           feOptES.inc mmalloc.og
	${CXXG} ${CXXFLAGSG} ${CPPFLAGS} -DESINGULAR -g ${DEFSG} -o ESingularg emacs.cc fegetopt.og ${LDFLAGS} ${LIBS} -lomalloc mmalloc.og

##
## compiler and linker options for profile version
##

CCP		= gcc
CXXP		= gcc

CFLAGSP		= -pg -O3 ${PIPE}
CXXFLAGSP	= -pg -O3 ${PIPE}
CXXTEMPLFLAGSP	= -fno-implicit-templates
DEFSP		= -DNDEBUG -DOM_NDEBUG -DDO_PROFILE -D@SING_UNAME@ @DEFS@ -DDL_TAIL=$(DL_TAILP)
LDFLAGSP	= -static @LDFLAGS@

CFLAGSB		= -g -O3 ${PIPE}
CXXFLAGSB	= -g -O3 ${PIPE}
CXXTEMPLFLAGSB	= -fno-implicit-templates
DEFSB		= -D@SING_UNAME@ -DOM_NDEBUG -DNDEBUG @DEFS@ -DDL_TAIL=$(DL_TAILB)
LDFLAGSB	= -static @LDFLAGS@

# bprof object  file to link with
BPROFOBJ	= /usr/local/lib/bmon.o

DEFST           = -DNO_INLINE -DNDEBUG -D@SING_UNAME@ -DOM_TRACK=2 -DOM_CHECK=0 @DEFS@ -DDL_TAIL=$(DL_TAILT)
LDFLAGST        = @LDFLAGS@
CFLAGST		= -g  -O2 -w ${PIPE}
CXXFLAGST	= -g  -O2 -w ${PIPE}

##
## op and ob files for gprof and bprof, ot for mtrack, oc for OMCHECK=1
##


##
## profile targets
##

## for gprof
p_Procs_%.sop: p_Procs_Lib_%.dl_op
	${CXXP} ${CXXFLAGSP} ${SFLAGS} ${SLDFLAGS} $< -o $@

p_Procs_Lib_%.dl_op : p_Procs_Lib.cc p_Procs_Dynamic.op
	${CXXP} ${CXXFLAGS} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFS} ${SFLAGS} -Dp_Procs_$* -c $< -o $@

%.dl_op: %.cc
	${CXXP} ${CXXFLAGSP} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFSP} ${SFLAGS} -c $< -o $@


mpsr.sop: $(MPSR_SOURCES:.cc=.dl_op)
	${CXXP} ${CXXFLAGSP} ${SFLAGS} ${SLDFLAGS} ${LDFLAGS} -o $@ $^ ${MP_LIBS}

dbmsr.sop: $(DBMSR_SOURCES:.cc=.dl_op)
	${CXXP} ${CXXFLAGSP} ${SFLAGS} ${SLDFLAGS} ${LDFLAGS} -o $@ $^ ${MP_LIBS}

claptmpl.op: claptmpl.cc mod2.h
	$(CXXP)  ${CXXFLAGSP} ${CPPFLAGS} ${DEFSP} -c $< -o $@

%.op: %.cc
	$(CXXP) ${CXXFLAGSP} ${CXXTEMPLFLAGSP} ${CPPFLAGS} ${DEFSP} -c $< -o $@

$(OBJP2) : %.op: %.c
	$(CCP)  ${CFLAGSP} ${CPPFLAGS} ${DEFSP} -c $< -o $@

Singularp${S_EXT}: scanner.cc   $(OBJP) mmalloc.op\
           iparith.op mpsr_Tok.op claptmpl.op tesths.cc version.h $(DL_LIBSP)
	$(CXXP) ${CXXFLAGSP} ${CXXTEMPLFLAGSP} ${CPPFLAGS} ${DEFSP} -o Singularp${S_EXT} \
	tesths.cc iparith.op mpsr_Tok.op claptmpl.op $(OBJP) ${LDFLAGSP} ${LIBS} -lomalloc_p mmalloc.op\
	${LD_DYN_FLAGS} 

iparith.op: iparith.inc iparith.cc
	$(CXXP)  ${CXXFLAGSP} ${CXXTEMPLFLAGSP} ${CPPFLAGS} ${DEFSP} -c iparith.cc -o iparith.op

mpsr_Tok.op: iparith.inc mpsr_Tok.cc
	$(CXXP) ${CXXFLAGSP} ${CXXTEMPLFLAGSP} ${CPPFLAGS} ${DEFSP} -c mpsr_Tok.cc -o mpsr_Tok.op


## for bprof
p_Procs_%.sob: p_Procs_Lib_%.dl_ob
	${CXXP} ${CXXFLAGSB} ${SFLAGS} ${SLDFLAGS} $< -o $@

p_Procs_Lib_%.dl_ob : p_Procs_Lib.cc  p_Procs_Dynamic.ob
	${CXXP} ${CXXFLAGS} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFS} ${SFLAGS} -Dp_Procs_$* -c $< -o $@

%.dl_ob: %.cc
	${CXXP} ${CXXFLAGSB} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFSB} ${SFLAGS} -c $< -o $@

mpsr.sob: $(MPSR_SOURCES:.cc=.dl_ob)
	${CXXP} ${CXXFLAGSB} ${SFLAGS} ${SLDFLAGS} ${LDFLAGS} -o $@ $^ ${MP_LIBS}

dbmsr.sob: $(DBMSR_SOURCES:.cc=.dl_ob)
	${CXXP} ${CXXFLAGSB} ${SFLAGS} ${SLDFLAGS} ${LDFLAGS} -o $@ $^ ${MP_LIBS}

claptmpl.ob: claptmpl.cc mod2.h
	$(CXXP)  ${CXXFLAGSP} ${CPPFLAGS} ${DEFSB} -c $< -o $@

%.ob: %.cc
	$(CXXP) ${CXXFLAGSP} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFSB} -c $< -o $@

$(OBJB2) : %.ob: %.c
	$(CCP)  ${CFLAGSP} ${CPPFLAGS} ${DEFSB} -c $< -o $@

Singularb${S_EXT}: scanner.cc   $(OBJB) iparith.ob mpsr_Tok.ob claptmpl.ob tesths.cc version.h mmalloc.ob
	$(CXXP) ${CXXFLAGSP} ${CPPFLAGS} ${DEFSB} -o Singularb${S_EXT} \
	tesths.cc iparith.ob mpsr_Tok.ob claptmpl.ob $(OBJB) $(BPROFOBJ) \
	${LDFLAGSP} ${LIBS} -lomalloc_ndebug mmalloc.ob ${LD_DYN_FLAGS} 

iparith.ob: iparith.inc iparith.cc
	$(CXXP)  ${CXXFLAGSP} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFSB} -c iparith.cc -o iparith.ob

mpsr_Tok.ob: iparith.inc mpsr_Tok.cc
	$(CXXP) ${CXXFLAGSP} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFSB} -c mpsr_Tok.cc -o mpsr_Tok.ob

#
# for mtrack
# 
p_Procs_%.sot: p_Procs_Lib_%.dl_ot 
	${CXXP} ${CXXFLAGST} ${SFLAGS} ${SLDFLAGS} $< -o $@

p_Procs_Lib_%.dl_ot : p_Procs_Lib.cc p_Procs_Dynamic.ot
	${CXXP} ${CXXFLAGS} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFS} ${SFLAGS} -Dp_Procs_$* -c $< -o $@

%.dl_ot: %.cc
	${CXXP} ${CXXFLAGST} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFST} ${SFLAGS} -c $< -o $@

mpsr.sot: $(MPSR_SOURCES:.cc=.dl_ot)
	${CXXP} ${CXXFLAGST} ${SFLAGS} ${SLDFLAGS} ${LDFLAGS} -o $@ $^ ${MP_LIBS}

dbmsr.sot: $(DBMSR_SOURCES:.cc=.dl_ot)
	${CXX} ${CXXFLAGST} ${SFLAGS} ${SLDFLAGS} ${LDFLAGS} -o $@ $^ ${MP_LIBS}

claptmpl.ot: claptmpl.cc mod2.h
	$(CXXP)  ${CXXFLAGST} ${CPPFLAGS} ${DEFST} -c $< -o $@

%.ot: %.cc
	$(CXXP) ${CXXFLAGST} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFST} -c $< -o $@

$(OBJT2) : %.ot: %.c
	$(CCP)  ${CFLAGST} ${CPPFLAGS} ${DEFST} -c $< -o $@

Singulart${S_EXT}: scanner.cc   $(OBJT) iparith.ot mpsr_Tok.ot claptmpl.ot tesths.cc version.h  mmalloc.ot $(DL_LIBST)
	$(CXXP) ${CXXFLAGST} ${CPPFLAGS} ${DEFST} -o Singulart${S_EXT} \
	tesths.cc iparith.ot mpsr_Tok.ot claptmpl.ot $(OBJT) ${LDFLAGST} ${LIBS} -lomalloc mmalloc.ot \
	${LD_DYN_FLAGS} 

iparith.ot: iparith.inc iparith.cc
	$(CXXP)  ${CXXFLAGST} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFST} -c iparith.cc -o iparith.ot

mpsr_Tok.ot: iparith.inc mpsr_Tok.cc
	$(CXXP) ${CXXFLAGST} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFST} -c mpsr_Tok.cc -o mpsr_Tok.ot


#
# for Singulara
#
DEFSA = -DOM_CHECK=1 -DHAVE_ASSUME -DNDEBUG -D@SING_UNAME@ @DEFS@ -DDL_TAIL=$(DL_TAILA)
CFLAGSA		= -g  -O -Wall -Wno-unused ${PIPE}
CXXFLAGSA	= -g  -O -Wall -Wno-unused ${PIPE}

p_Procs_%.soa: p_Procs_Lib_%.dl_oa
	${CXX} ${CXXFLAGSA} ${SFLAGS} ${SLDFLAGS} $< -o $@

p_Procs_Lib_%.dl_oa : p_Procs_Lib.cc p_Procs_Dynamic.oa
	${CXX} ${CXXFLAGS} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFS} ${SFLAGS} -Dp_Procs_$* -c $< -o $@

%.dl_oa: %.cc
	${CXX} ${CXXFLAGSA} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFSA} ${SFLAGS} -c $< -o $@

mpsr.soa: $(MPSR_SOURCES:.cc=.dl_oa)
	${CXX} ${CXXFLAGSA} ${SFLAGS} ${SLDFLAGS} ${LDFLAGS} -o $@ $^ ${MP_LIBS}

dbmsr.soa: $(DBMSR_SOURCES:.cc=.dl_oa)
	${CXX} ${CXXFLAGSA} ${SFLAGS} ${SLDFLAGS} ${LDFLAGS} -o $@ $^ ${MP_LIBS}


claptmpl.oa: claptmpl.cc mod2.h
	$(CXX)  ${CXXFLAGSA} ${CPPFLAGS} ${DEFSA} -c $< -o $@

%.oa: %.cc
	$(CXX) ${CXXFLAGSA} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFSA} -c $< -o $@

$(OBJA2) : %.oa: %.c
	$(CC)  ${CFLAGSA} ${CPPFLAGS} ${DEFSA} -c $< -o $@

Singulara${S_EXT}: scanner.cc   $(OBJA) iparith.oa mpsr_Tok.oa claptmpl.oa tesths.cc version.h  mmalloc.oa $(DL_LIBSA)
	$(CXX) ${CXXFLAGSA} ${CPPFLAGS} ${DEFSA} -o Singulara${S_EXT} \
	tesths.cc iparith.oa mpsr_Tok.oa claptmpl.oa $(OBJA) ${LDFLAGS} ${LIBS} -lomalloc mmalloc.oa \
	${LD_DYN_FLAGS} 

iparith.oa: iparith.inc iparith.cc
	$(CXX)  ${CXXFLAGSA} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFSA} -c iparith.cc -o iparith.oa

mpsr_Tok.oa: iparith.inc mpsr_Tok.cc
	$(CXX) ${CXXFLAGAT} ${CXXTEMPLFLAGSB} ${CPPFLAGS} ${DEFSA} -c mpsr_Tok.cc -o mpsr_Tok.oa

#
# for Macro expansion
# 
CXXSOURCESD := $(CXXSOURCES:%.cc=%_d.cc) $(STATIC_SOURCES:%.cc=%_d.cc)
CSOURCESD := $(CSOURCES:%.c=%_d.c)
OBJD1 := $(CXXSOURCESD:.cc=.od)
OBJD2 := $(CSOURCESD:.c=.od)

%_d.c : %.c
	$(CCG) $(CFLAGSG) ${CPPFLAGS} ${DEFS}-E -P $< | $(PERL) -p -e 's/;/;\n/g' | $(PERL) -p -e 's/\{/\n\{/g' | $(PERL) -p -e 's/\}/\n\}/g' > $@

%_d.cc : %.cc
	$(CCG) $(CXXFLAGS) ${CPPFLAGS} ${DEFS} -E -P $< | $(PERL) -p -e 's/;/;\n/g' | $(PERL) -p -e 's/\{/\n\{/g' | $(PERL) -p -e 's/\}/\n\}/g' > $@

.PRECIOUS: %_d.cc %_d.c

%.od : %.c
	$(CCG)  ${CFLAGSG} ${CPPFLAGS} ${DEFSG} -c $< -o $@

%.od : %.cc
	$(CXXG) ${CXXFLAGSG} ${CXXTEMPLFLAGSG} ${CPPFLAGS} ${DEFSG} -c $< -o $@

Singular_d: scanner.cc  $(OBJD)  mmalloc.od\
           iparith.od mpsr_Tok.od claptmpl.og tesths.cc version.h 
	$(CXXG) ${CXXFLAGSG} ${CXXTEMPLFLAGSG} ${CPPFLAGS} ${DEFSG} -o Singularg_d \
	tesths.cc iparith.od mpsr_Tok.od claptmpl.og $(OBJG) ${LDFLAGS} ${LIBS} -lomalloc mmalloc.od \
	${LD_DYN_FLAGS} ${LD_LIBC} 

##
## check_aso
##
check_aso:
	${PERL} check_aso.pl $(SOURCES)
##
## dependencies
##

%.dd: %.cc mod2.h 
	echo $(@:.dd=.og) $(@:.dd=.op) $(@:.dd=_d.cc) $(@:.dd=.od) $(@:.dd=.ob) $(@:.dd=.ot) $(@:.dd=.oa) $(@:.dd=.dl_o) $(@:.dd=.dl_og) $(@:.dd=.dl_op) $(@:.dd=.dl_od) $(@:.dd=.dl_ob) $(@:.dd=.dl_ot) $(@:.dd=.dl_oa)" " \\ > $@
	$(CXXM) -DGENTABLE ${CPPFLAGS} ${DEFSG} $< >> $@

%.d: %.c mod2.h 
	echo $(@:.d=.og) $(@:.d=.od) $(@:.dd=_d.c) $(@:.d=.op) $(@:.d=.ob) $(@:.d=.ot) $(@:.d=.oa)" " \\ > $@
	$(CCM) ${CPPFLAGS} ${DEFSG} $< >> $@

depend:   $(CXXSOURCES:.cc=.dd) $(ESOURCES:.cc=.dd) $(CSOURCES:.c=.d) mod2.h claptmpl.dd
	cat *.d *.dd >depend

ifeq (depend,$(wildcard depend))
include depend
endif


