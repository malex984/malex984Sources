
/*  A Bison parser, made from grammar.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	DOTDOT	257
#define	EQUAL_EQUAL	258
#define	GE	259
#define	LE	260
#define	MINUSMINUS	261
#define	NOT	262
#define	NOTEQUAL	263
#define	PLUSPLUS	264
#define	COLONCOLON	265
#define	GRING_CMD	266
#define	INTMAT_CMD	267
#define	PROC_CMD	268
#define	RING_CMD	269
#define	BEGIN_RING	270
#define	IDEAL_CMD	271
#define	MAP_CMD	272
#define	MATRIX_CMD	273
#define	MODUL_CMD	274
#define	NUMBER_CMD	275
#define	POLY_CMD	276
#define	RESOLUTION_CMD	277
#define	VECTOR_CMD	278
#define	BETTI_CMD	279
#define	COEFFS_CMD	280
#define	COEF_CMD	281
#define	CONTRACT_CMD	282
#define	DEGREE_CMD	283
#define	DEG_CMD	284
#define	DIFF_CMD	285
#define	DIM_CMD	286
#define	DIVISION_CMD	287
#define	ELIMINATION_CMD	288
#define	E_CMD	289
#define	FETCH_CMD	290
#define	FREEMODULE_CMD	291
#define	KEEPRING_CMD	292
#define	HILBERT_CMD	293
#define	HOMOG_CMD	294
#define	IMAP_CMD	295
#define	INDEPSET_CMD	296
#define	INTERRED_CMD	297
#define	INTERSECT_CMD	298
#define	JACOB_CMD	299
#define	JET_CMD	300
#define	KBASE_CMD	301
#define	KOSZUL_CMD	302
#define	LEADCOEF_CMD	303
#define	LEADEXP_CMD	304
#define	LEAD_CMD	305
#define	LEADMONOM_CMD	306
#define	LIFTSTD_CMD	307
#define	LIFT_CMD	308
#define	MAXID_CMD	309
#define	MINBASE_CMD	310
#define	MINOR_CMD	311
#define	MINRES_CMD	312
#define	MODULO_CMD	313
#define	MRES_CMD	314
#define	MULTIPLICITY_CMD	315
#define	ORD_CMD	316
#define	PAR_CMD	317
#define	PARDEG_CMD	318
#define	PREIMAGE_CMD	319
#define	QUOTIENT_CMD	320
#define	QHWEIGHT_CMD	321
#define	REDUCE_CMD	322
#define	REGULARITY_CMD	323
#define	RES_CMD	324
#define	SIMPLIFY_CMD	325
#define	SORTVEC_CMD	326
#define	SRES_CMD	327
#define	STD_CMD	328
#define	SUBST_CMD	329
#define	SYZYGY_CMD	330
#define	VAR_CMD	331
#define	VDIM_CMD	332
#define	WEDGE_CMD	333
#define	WEIGHT_CMD	334
#define	VALTVARS	335
#define	VMAXDEG	336
#define	VMAXMULT	337
#define	VNOETHER	338
#define	VMINPOLY	339
#define	END_RING	340
#define	CMD_1	341
#define	CMD_2	342
#define	CMD_3	343
#define	CMD_12	344
#define	CMD_13	345
#define	CMD_23	346
#define	CMD_123	347
#define	CMD_M	348
#define	ROOT_DECL	349
#define	ROOT_DECL_LIST	350
#define	RING_DECL	351
#define	EXAMPLE_CMD	352
#define	EXPORT_CMD	353
#define	HELP_CMD	354
#define	KILL_CMD	355
#define	LIB_CMD	356
#define	LISTVAR_CMD	357
#define	SETRING_CMD	358
#define	TYPE_CMD	359
#define	STRINGTOK	360
#define	BLOCKTOK	361
#define	INT_CONST	362
#define	UNKNOWN_IDENT	363
#define	RINGVAR	364
#define	PROC_DEF	365
#define	BREAK_CMD	366
#define	CONTINUE_CMD	367
#define	ELSE_CMD	368
#define	EVAL	369
#define	QUOTE	370
#define	FOR_CMD	371
#define	IF_CMD	372
#define	SYS_BREAK	373
#define	WHILE_CMD	374
#define	RETURN	375
#define	PARAMETER	376
#define	SYSVAR	377
#define	UMINUS	378

#line 8 "grammar.y"


#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>

#include "mod2.h"
#include <mylimits.h>
#include "omalloc.h"
#include "tok.h"
#include "stype.h"
#include "ipid.h"
#include "intvec.h"
#include "febase.h"
#include "matpol.h"
#include "ring.h"
#include "kstd1.h"
#include "subexpr.h"
#include "ipshell.h"
#include "ipconv.h"
#include "sdb.h"
#include "ideals.h"
#include "numbers.h"
#include "polys.h"
#include "weight.h"
#include "stairc.h"
#include "timer.h"
#include "cntrlc.h"
#include "maps.h"
#include "syz.h"
#include "lists.h"
#include "libparse.h"

#if 0
void debug_list(leftv v)
{
  idhdl r=basePackHdl;
  idhdl h;
  BOOLEAN found=FALSE;
  const char *nn=v->name;
  h=IDROOT->get(nn,myynest);
  if (h!=NULL)
  {
     Print("Curr::%s, (%s)\n",nn,Tok2Cmdname((int)IDTYP(h)));
     found=TRUE;
  }
  else         Print("`%s` not found in IDROOT\n",nn);
  while (r!=NULL)
  {
    if ((IDTYP(r)==PACKAGE_CMD)
    || (IDTYP(r)==RING_CMD)
    || (IDTYP(r)==QRING_CMD))
    {
      h=IDPACKAGE(r)->idroot->get(nn,myynest);
      if (h!=NULL)
      {
        Print("%s::%s, (%s)\n",r->id,nn,Tok2Cmdname((int)IDTYP(h)));
        found=TRUE;
      }
      else         Print("%s::%s not found\n",r->id,nn);
    }
    if (r==basePackHdl) r=IDPACKAGE(r)->idroot;
    r=r->next;
   if (r==basePackHdl) break;
  }
  if (!found)
  {
    listall(TRUE);
  }
}
#endif

/* From the bison docu:

     By defining the macro `YYMAXDEPTH', you can control how deep the
parser stack can become before a stack overflow occurs.  Define the
macro with a value that is an integer.  This value is the maximum number
of tokens that can be shifted (and not reduced) before overflow.  It
must be a constant expression whose value is known at compile time.

   The stack space allowed is not necessarily allocated.  If you
specify a large value for `YYMAXDEPTH', the parser actually allocates a
small stack at first, and then makes it bigger by stages as needed.
This increasing allocation happens automatically and silently.
Therefore, you do not need to make `YYMAXDEPTH' painfully small merely
to save space for ordinary inputs that do not need much stack.

   The default value of `YYMAXDEPTH', if you do not define it, is 10000.
*/
#define YYMAXDEPTH INT_MAX

extern int   yylineno;
extern FILE* yyin;

char       my_yylinebuf[80];
char *     currid;
BOOLEAN    yyInRingConstruction=FALSE;
BOOLEAN    expected_parms;
int        cmdtok;
int        inerror = 0;

#define TESTSETINT(a,i)                                \
   if ((a).Typ() != INT_CMD)                           \
   {                                                   \
     WerrorS("no int expression");                     \
     YYERROR;                                          \
   }                                                   \
   (i) = (int)((long)(a).Data());

#define MYYERROR(a) { WerrorS(a); YYERROR; }

void yyerror(char * fmt)
{

  BOOLEAN old_errorreported=errorreported;
  errorreported = TRUE;
  if (currid!=NULL)
  {
    killid(currid,&IDROOT);
    currid = NULL;
  }
  if(inerror==0)
  {
    #ifdef HAVE_TCL
    if (tclmode)
    { /* omit output of line number if tclmode and stdin */
      const char *n=VoiceName();
      if (strcmp(n,"STDIN")==0)
        Werror( "error occurred in %s: `%s`"
               ,n, my_yylinebuf);
      else
        Werror( "error occurred in %s line %d: `%s`"
               ,n, yylineno, my_yylinebuf);
    }
    else
    #endif
    {
      if ((strlen(fmt)>1)
      && (strncmp(fmt,"parse",5)!=0)
      && (strncmp(fmt,"syntax",6)!=0))
        WerrorS(fmt);
      Werror( "error occurred in %s line %d: `%s`"
             ,VoiceName(), yylineno, my_yylinebuf);
    }
    if (cmdtok!=0)
    {
      char *s=Tok2Cmdname(cmdtok);
      if (expected_parms)
      {
        Werror("expected %s-expression. type \'help %s;\'",s,s);
      }
      else
      {
        Werror("wrong type declaration. type \'help %s;\'",s);
      }
    }
    if (!old_errorreported && (lastreserved!=NULL))
    {
      Werror("last reserved name was `%s`",lastreserved);
    }
    inerror=1;
  }
  if ((currentVoice!=NULL)
  && (currentVoice->prev!=NULL)
  && (myynest>0)
#ifdef HAVE_SDB
  && ((sdb_flags &1)==0)
#endif
  )
  {
    Werror("leaving %s",VoiceName());
  }
}

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		369
#define	YYFLAG		-32768
#define	YYNTBASE	141

#define YYTRANSLATE(x) ((unsigned)(x) <= 378 ? yytranslate[x] : 184)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   135,     2,   137,
   138,     2,   127,   133,   128,     2,   129,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   139,   134,   125,
   124,   126,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   130,     2,   131,   132,     2,   140,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   136
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     4,     6,     9,    12,    14,    16,    18,    21,
    23,    25,    27,    29,    31,    33,    35,    37,    40,    42,
    44,    46,    48,    50,    52,    54,    56,    58,    61,    63,
    65,    69,    73,    78,    82,    84,    86,    88,    92,    94,
    96,    98,   102,   109,   114,   119,   124,   128,   133,   138,
   142,   147,   154,   163,   170,   179,   184,   189,   196,   201,
   208,   217,   226,   230,   235,   244,   249,   258,   263,   272,
   277,   281,   287,   288,   294,   297,   299,   302,   305,   309,
   313,   317,   321,   325,   329,   333,   337,   341,   345,   348,
   351,   354,   357,   359,   363,   365,   367,   370,   373,   376,
   379,   388,   391,   400,   403,   407,   410,   412,   414,   420,
   422,   424,   429,   431,   435,   437,   441,   443,   444,   449,
   453,   456,   460,   463,   466,   470,   475,   480,   485,   490,
   495,   500,   505,   510,   515,   522,   529,   536,   543,   550,
   557,   564,   571,   575,   577,   586,   589,   592,   594,   596,
   599,   602,   604,   610,   613,   619,   621,   623,   627,   633,
   637,   641,   646,   649,   652,   657
};

static const short yyrhs[] = {    -1,
   141,   142,     0,   143,     0,   145,   134,     0,   157,   134,
     0,   183,     0,   119,     0,   134,     0,     1,   134,     0,
   178,     0,   179,     0,   144,     0,   180,     0,   181,     0,
   165,     0,   167,     0,   168,     0,    98,   107,     0,   146,
     0,   169,     0,   170,     0,   171,     0,   182,     0,   173,
     0,   174,     0,   176,     0,   177,     0,   154,   148,     0,
   110,     0,   155,     0,   147,    11,   147,     0,   147,   137,
   138,     0,   147,   137,   148,   138,     0,   130,   148,   131,
     0,   108,     0,   123,     0,   158,     0,   148,   133,   149,
     0,   149,     0,   153,     0,   147,     0,   137,   148,   138,
     0,   149,   130,   149,   133,   149,   131,     0,   149,   130,
   149,   131,     0,    95,   137,   149,   138,     0,    96,   137,
   148,   138,     0,    96,   137,   138,     0,    97,   137,   149,
   138,     0,   156,   137,   148,   138,     0,   156,   137,   138,
     0,    87,   137,   149,   138,     0,    88,   137,   149,   133,
   149,   138,     0,    89,   137,   149,   133,   149,   133,   149,
   138,     0,    92,   137,   149,   133,   149,   138,     0,    92,
   137,   149,   133,   149,   133,   149,   138,     0,    90,   137,
   149,   138,     0,    91,   137,   149,   138,     0,    90,   137,
   149,   133,   149,   138,     0,    93,   137,   149,   138,     0,
    93,   137,   149,   133,   149,   138,     0,    91,   137,   149,
   133,   149,   133,   149,   138,     0,    93,   137,   149,   133,
   149,   133,   149,   138,     0,    94,   137,   138,     0,    94,
   137,   148,   138,     0,    19,   137,   149,   133,   149,   133,
   149,   138,     0,    19,   137,   149,   138,     0,    13,   137,
   149,   133,   149,   133,   149,   138,     0,    13,   137,   149,
   138,     0,    15,   137,   159,   133,   159,   133,   163,   138,
     0,    15,   137,   149,   138,     0,   151,   149,   152,     0,
   151,   149,   124,   149,   152,     0,     0,   115,   137,   150,
   149,   138,     0,   116,   137,     0,   138,     0,   149,    10,
     0,   149,     7,     0,   149,   127,   149,     0,   149,   128,
   149,     0,   149,   129,   149,     0,   149,   132,   149,     0,
   149,   125,   149,     0,   149,   135,   149,     0,   149,     9,
   149,     0,   149,     4,   149,     0,   149,     3,   149,     0,
   149,   139,   149,     0,     8,   149,     0,   128,   149,     0,
   157,   164,     0,   148,   124,     0,   109,     0,   140,   149,
   140,     0,    17,     0,    20,     0,    95,   147,     0,    96,
   147,     0,    97,   147,     0,   156,   147,     0,    19,   147,
   130,   149,   131,   130,   149,   131,     0,    19,   147,     0,
    13,   147,   130,   149,   131,   130,   149,   131,     0,    13,
   147,     0,   157,   133,   147,     0,    14,   147,     0,   106,
     0,   149,     0,   137,   149,   133,   148,   138,     0,   109,
     0,   160,     0,   160,   137,   148,   138,     0,   161,     0,
   161,   133,   162,     0,   161,     0,   137,   162,   138,     0,
   124,     0,     0,   125,   158,   166,   134,     0,   100,   106,
   134,     0,   100,   134,     0,    98,   106,   134,     0,    99,
   148,     0,   101,   147,     0,   170,   133,   147,     0,   103,
   137,    95,   138,     0,   103,   137,    96,   138,     0,   103,
   137,    97,   138,     0,   103,   137,   156,   138,     0,   103,
   137,    15,   138,     0,   103,   137,    19,   138,     0,   103,
   137,    13,   138,     0,   103,   137,    14,   138,     0,   103,
   137,   147,   138,     0,   103,   137,   147,   133,    95,   138,
     0,   103,   137,   147,   133,    96,   138,     0,   103,   137,
   147,   133,    97,   138,     0,   103,   137,   147,   133,   156,
   138,     0,   103,   137,   147,   133,    15,   138,     0,   103,
   137,   147,   133,    19,   138,     0,   103,   137,   147,   133,
    13,   138,     0,   103,   137,   147,   133,    14,   138,     0,
   103,   137,   138,     0,    15,     0,   172,   147,   164,   159,
   133,   159,   133,   163,     0,   172,   147,     0,   123,   158,
     0,   104,     0,    38,     0,   175,   149,     0,   105,   149,
     0,   148,     0,   118,   137,   149,   138,   107,     0,   114,
   107,     0,   118,   137,   149,   138,   112,     0,   112,     0,
   113,     0,   120,   106,   107,     0,   117,   106,   106,   106,
   107,     0,    14,   155,   107,     0,   111,   106,   107,     0,
   111,   106,   106,   107,     0,   122,   157,     0,   122,   149,
     0,   121,   137,   148,   138,     0,   121,   137,   138,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   361,   363,   397,   399,   401,   403,   407,   412,   414,   462,
   463,   464,   465,   466,   467,   468,   469,   473,   476,   477,
   478,   479,   480,   481,   482,   483,   484,   487,   493,   499,
   503,   507,   511,   531,   559,   587,   593,   601,   613,   619,
   624,   625,   626,   630,   634,   638,   642,   646,   650,   654,
   658,   662,   666,   670,   674,   678,   682,   686,   690,   694,
   698,   702,   706,   710,   714,   718,   722,   726,   730,   734,
   738,   742,   759,   765,   777,   785,   793,   798,   802,   806,
   810,   814,   818,   822,   826,   830,   834,   838,   842,   849,
   855,   857,   869,   871,   882,   883,   887,   897,   906,   910,
   914,   930,   934,   954,   972,   997,  1008,  1012,  1014,  1027,
  1035,  1045,  1089,  1091,  1099,  1101,  1107,  1118,  1123,  1126,
  1132,  1138,  1146,  1160,  1181,  1203,  1208,  1212,  1217,  1221,
  1225,  1229,  1233,  1237,  1242,  1251,  1260,  1269,  1278,  1287,
  1296,  1305,  1323,  1329,  1333,  1377,  1387,  1401,  1401,  1403,
  1479,  1486,  1515,  1528,  1545,  1554,  1559,  1566,  1578,  1597,
  1609,  1629,  1652,  1659,  1670,  1678
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","DOTDOT",
"EQUAL_EQUAL","GE","LE","MINUSMINUS","NOT","NOTEQUAL","PLUSPLUS","COLONCOLON",
"GRING_CMD","INTMAT_CMD","PROC_CMD","RING_CMD","BEGIN_RING","IDEAL_CMD","MAP_CMD",
"MATRIX_CMD","MODUL_CMD","NUMBER_CMD","POLY_CMD","RESOLUTION_CMD","VECTOR_CMD",
"BETTI_CMD","COEFFS_CMD","COEF_CMD","CONTRACT_CMD","DEGREE_CMD","DEG_CMD","DIFF_CMD",
"DIM_CMD","DIVISION_CMD","ELIMINATION_CMD","E_CMD","FETCH_CMD","FREEMODULE_CMD",
"KEEPRING_CMD","HILBERT_CMD","HOMOG_CMD","IMAP_CMD","INDEPSET_CMD","INTERRED_CMD",
"INTERSECT_CMD","JACOB_CMD","JET_CMD","KBASE_CMD","KOSZUL_CMD","LEADCOEF_CMD",
"LEADEXP_CMD","LEAD_CMD","LEADMONOM_CMD","LIFTSTD_CMD","LIFT_CMD","MAXID_CMD",
"MINBASE_CMD","MINOR_CMD","MINRES_CMD","MODULO_CMD","MRES_CMD","MULTIPLICITY_CMD",
"ORD_CMD","PAR_CMD","PARDEG_CMD","PREIMAGE_CMD","QUOTIENT_CMD","QHWEIGHT_CMD",
"REDUCE_CMD","REGULARITY_CMD","RES_CMD","SIMPLIFY_CMD","SORTVEC_CMD","SRES_CMD",
"STD_CMD","SUBST_CMD","SYZYGY_CMD","VAR_CMD","VDIM_CMD","WEDGE_CMD","WEIGHT_CMD",
"VALTVARS","VMAXDEG","VMAXMULT","VNOETHER","VMINPOLY","END_RING","CMD_1","CMD_2",
"CMD_3","CMD_12","CMD_13","CMD_23","CMD_123","CMD_M","ROOT_DECL","ROOT_DECL_LIST",
"RING_DECL","EXAMPLE_CMD","EXPORT_CMD","HELP_CMD","KILL_CMD","LIB_CMD","LISTVAR_CMD",
"SETRING_CMD","TYPE_CMD","STRINGTOK","BLOCKTOK","INT_CONST","UNKNOWN_IDENT",
"RINGVAR","PROC_DEF","BREAK_CMD","CONTINUE_CMD","ELSE_CMD","EVAL","QUOTE","FOR_CMD",
"IF_CMD","SYS_BREAK","WHILE_CMD","RETURN","PARAMETER","SYSVAR","'='","'<'","'>'",
"'+'","'-'","'/'","'['","']'","'^'","','","';'","'&'","UMINUS","'('","')'","':'",
"'`'","lines","pprompt","flowctrl","example_dummy","command","assign","elemexpr",
"exprlist","expr","@1","quote_start","quote_end","expr_arithmetic","left_value",
"extendedid","currring_lists","declare_ip_variable","stringexpr","rlist","ordername",
"orderelem","OrderingList","ordering","cmdeq","filecmd","@2","helpcmd","examplecmd",
"exportcmd","killcmd","listcmd","ringcmd1","ringcmd","scriptcmd","setrings",
"setringcmd","typecmd","ifcmd","whilecmd","forcmd","proccmd","parametercmd",
"returncmd", NULL
};
#endif

static const short yyr1[] = {     0,
   141,   141,   142,   142,   142,   142,   142,   142,   142,   143,
   143,   143,   143,   143,   143,   143,   143,   144,   145,   145,
   145,   145,   145,   145,   145,   145,   145,   146,   147,   147,
   147,   147,   147,   147,   147,   147,   147,   148,   148,   149,
   149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   150,   149,   151,   152,   153,   153,   153,   153,
   153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
   154,   154,   155,   155,   156,   156,   157,   157,   157,   157,
   157,   157,   157,   157,   157,   157,   158,   159,   159,   160,
   161,   161,   162,   162,   163,   163,   164,   166,   165,   167,
   167,   168,   169,   170,   170,   171,   171,   171,   171,   171,
   171,   171,   171,   171,   171,   171,   171,   171,   171,   171,
   171,   171,   171,   172,   173,   173,   174,   175,   175,   176,
   177,   177,   178,   178,   178,   178,   178,   179,   180,   181,
   181,   181,   182,   182,   183,   183
};

static const short yyr2[] = {     0,
     0,     2,     1,     2,     2,     1,     1,     1,     2,     1,
     1,     1,     1,     1,     1,     1,     1,     2,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     2,     1,     1,
     3,     3,     4,     3,     1,     1,     1,     3,     1,     1,
     1,     3,     6,     4,     4,     4,     3,     4,     4,     3,
     4,     6,     8,     6,     8,     4,     4,     6,     4,     6,
     8,     8,     3,     4,     8,     4,     8,     4,     8,     4,
     3,     5,     0,     5,     2,     1,     2,     2,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
     2,     2,     1,     3,     1,     1,     2,     2,     2,     2,
     8,     2,     8,     2,     3,     2,     1,     1,     5,     1,
     1,     4,     1,     3,     1,     3,     1,     0,     4,     3,
     2,     3,     2,     2,     3,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     6,     6,     6,     6,     6,     6,
     6,     6,     3,     1,     8,     2,     2,     1,     1,     2,
     2,     1,     5,     2,     5,     1,     1,     3,     5,     3,
     3,     4,     2,     2,     4,     3
};

static const short yydefact[] = {     1,
     0,     0,     0,     0,     0,   144,    95,     0,    96,   149,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   148,     0,   107,    35,
    93,    29,     0,   156,   157,     0,     0,     0,     0,     0,
     7,     0,     0,     0,    36,     0,     0,     0,     8,     0,
     0,     2,     3,    12,     0,    19,    41,   152,    39,     0,
    40,     0,    30,     0,     0,    37,    15,    16,    17,    20,
    21,    22,     0,    24,    25,     0,    26,    27,    10,    11,
    13,    14,    23,     6,     9,     0,     0,     0,     0,     0,
     0,    36,    89,     0,     0,   104,   106,    30,     0,     0,
   102,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    97,     0,    98,     0,    99,     0,    18,   123,     0,   121,
   124,     0,   151,     0,   154,    73,    75,     0,     0,     0,
     0,     0,   164,   163,   147,   118,    90,     0,     0,     0,
     4,     0,     0,    92,     0,     0,     0,    78,     0,    77,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    28,
     0,   100,   117,     0,     5,    91,     0,   146,   150,     0,
     0,   160,     0,   108,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    63,     0,     0,    47,     0,     0,
   122,   120,     0,     0,     0,     0,     0,     0,     0,   143,
     0,     0,     0,   161,     0,     0,     0,   158,   166,     0,
     0,    34,    42,    94,    31,    32,     0,    38,    87,    86,
    85,    83,    79,    80,    81,     0,    82,    84,    88,     0,
    76,    71,    50,     0,   105,   125,     0,     0,    68,     0,
    39,    70,     0,     0,    66,     0,    51,     0,     0,     0,
    56,     0,    57,     0,     0,    59,    64,    45,    46,    48,
   132,   133,   130,   131,   126,   127,   128,     0,   134,   129,
   162,     0,     0,     0,   165,   119,    33,    44,     0,     0,
    49,   108,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    74,   159,   153,   155,     0,    72,     0,
     0,     0,     0,     0,     0,     0,    52,     0,    58,     0,
     0,    54,     0,    60,   141,   142,   139,   140,   135,   136,
   137,   138,    43,     0,     0,     0,   109,   110,     0,   111,
   115,     0,     0,     0,     0,     0,     0,     0,     0,    67,
   103,   113,     0,     0,    69,    65,   101,    53,    61,    55,
    62,   145,     0,   116,     0,   114,   112,     0,     0
};

static const short yydefgoto[] = {     1,
    52,    53,    54,    55,    56,    57,   139,    59,   205,    60,
   232,    61,    62,    63,    94,    65,    66,   175,   340,   341,
   353,   342,   166,    67,   211,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84
};

static const short yypact[] = {-32768,
   276,  -131,  1645,   377,   -50,  -120,-32768,   620,-32768,-32768,
   -73,   -71,   -67,   -60,   -53,   -40,   -37,   -31,   858,  1045,
  1100,  -100,  1645,  -102,   -50,   -30,-32768,  1645,-32768,-32768,
-32768,-32768,     3,-32768,-32768,   -72,   -18,     2,    10,    11,
-32768,    34,    13,  1295,    37,    37,  1645,  1645,-32768,  1645,
  1645,-32768,-32768,-32768,    44,-32768,     0,   -83,  1225,  1645,
-32768,  1645,-32768,  1181,  -105,-32768,-32768,-32768,-32768,-32768,
    20,-32768,   -50,-32768,-32768,  1645,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    42,  -120,    43,    47,    53,
    55,-32768,   139,    61,  1645,    78,     0,    98,  1699,  1645,
    99,  1645,  1645,  1645,  1645,  1645,  1645,  1645,  1361,  1645,
     0,  1421,     0,  1645,     0,    84,-32768,    73,    91,-32768,
     0,  1750,  1225,   -64,-32768,-32768,-32768,   104,  1645,   119,
  1475,   -50,  1225,    95,-32768,-32768,   139,   -78,  -124,    72,
-32768,   -50,  1533,-32768,  1645,  1645,  1645,-32768,  1645,-32768,
  1645,  1645,  1645,  1645,  1645,  1645,  1645,  1645,    92,    73,
  1587,     0,-32768,   -50,-32768,-32768,   -50,   -10,  1225,   178,
  1645,-32768,  1645,   502,   106,   315,  1645,   517,   553,   581,
   339,   405,   650,   420,-32768,  -113,   663,-32768,   -84,   686,
-32768,-32768,   100,   102,   103,   107,   108,   109,   111,-32768,
    76,   112,   135,-32768,  1645,   137,   714,-32768,-32768,   -81,
   117,-32768,-32768,-32768,-32768,-32768,   -70,  1225,  1238,  1334,
  1334,   105,    64,    64,   139,   448,    38,     6,  1225,  1645,
-32768,-32768,-32768,   -66,     0,     0,  1699,  1645,-32768,    27,
   729,-32768,  1699,  1645,-32768,   742,-32768,  1645,  1645,  1645,
-32768,  1645,-32768,  1645,  1645,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   337,-32768,-32768,
-32768,   755,   145,   -21,-32768,-32768,-32768,-32768,  1645,   796,
-32768,  1225,   120,   819,    14,  1645,   121,   888,   127,   901,
   929,   952,   967,   472,   487,   122,   125,   126,   136,   141,
   142,   143,   144,-32768,-32768,-32768,-32768,   980,-32768,  1699,
  1645,  1645,   -45,  -104,  1645,  1645,-32768,  1645,-32768,  1645,
  1645,-32768,  1645,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   132,   993,  1034,-32768,-32768,   149,   146,
-32768,   148,  1062,  1126,  1139,  1167,  1195,  1210,  -104,-32768,
-32768,   154,   150,  1645,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   149,-32768,   -35,-32768,-32768,   259,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,    19,    -1,    18,-32768,-32768,
    12,-32768,-32768,   289,     7,   254,    59,  -225,-32768,  -337,
   -63,   -48,   131,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768
};


#define	YYLAST		1890


static const short yytable[] = {    58,
   142,   352,    85,   119,   338,   116,   117,    64,   145,   147,
   142,   283,   148,   213,   149,   150,    99,   287,   163,   145,
    93,   118,    96,    97,   257,   352,   101,   164,   165,   146,
   147,   120,   339,   148,   125,   149,   150,   111,   113,   115,
   144,   203,   204,   121,   148,   123,   138,   150,   145,   145,
    64,   145,   212,   259,   145,    29,   275,    30,    31,    32,
   160,   133,   145,   102,   137,   103,   145,   277,   140,   104,
   148,   281,    92,   150,   146,   147,   105,   159,   148,    48,
   149,   150,   162,   106,   334,   306,   142,   145,   142,    51,
   307,   168,   337,   169,   146,   147,   107,   145,   148,   108,
   149,   150,   367,   135,   136,   109,   122,   186,   124,   142,
   189,   148,   170,   163,   150,   128,   174,   176,   126,   178,
   179,   180,   181,   182,   183,   184,   143,   187,   202,   210,
   151,   190,   152,   153,   154,   155,   143,   156,   127,   130,
   201,   217,    29,   312,   158,   148,   207,   129,   150,   131,
    97,   151,   167,   152,   153,   154,   155,   285,   156,   234,
   215,   157,   218,   219,   220,   158,   221,   155,   222,   223,
   224,   225,   226,   227,   228,   229,   158,   141,    95,   100,
   146,   147,   235,   110,   148,   236,   149,   150,   240,   112,
   241,   114,   154,   155,   246,   156,   151,   161,   152,   153,
   154,   155,   158,   156,   172,   145,   157,   171,   268,   206,
   158,   214,   143,   269,   143,   230,   151,   191,   152,   153,
   154,   155,   272,   156,   192,   208,   157,   164,   177,   231,
   158,   152,   153,   154,   155,   143,   156,   261,   243,   262,
   263,   271,   273,   158,   264,   265,   266,   280,   267,   270,
   276,   305,   310,   314,   282,   284,   316,   338,   369,   325,
   282,   288,   326,   327,   349,   290,   291,   292,   155,   293,
   156,   294,   295,   328,   303,   368,     2,   158,   329,   330,
   331,   332,   354,     3,   313,   355,   363,   364,     4,     5,
     6,   309,     7,    98,     8,     9,   308,   134,   237,   366,
   362,     0,   151,     0,   152,   153,   154,   155,     0,   156,
   238,     0,   157,    10,     0,   239,   158,   146,   147,     0,
     0,   148,     0,   149,   150,     0,     0,   282,   335,   336,
     0,     0,   343,   344,     0,   345,     0,   346,   347,     0,
   348,   146,   147,     0,     0,   148,     0,   149,   150,   296,
   297,   298,   365,     7,     0,   299,     9,     0,     0,     0,
     0,     0,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,     0,    26,    27,
    28,    29,     0,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,     0,
    46,     0,     0,    47,     0,    48,     0,   146,   147,    49,
     0,   148,    50,   149,   150,    51,     0,     0,     0,     0,
     0,     0,   146,   147,     0,     0,   148,     0,   149,   150,
     0,   300,   301,   302,     0,     0,     0,     0,     0,   151,
     0,   152,   153,   154,   155,     0,   156,   244,     0,   157,
   146,   147,   245,   158,   148,     0,   149,   150,     0,     0,
     0,     0,     0,   151,     0,   152,   153,   154,   155,     0,
   156,   250,     0,   157,   146,   147,   251,   158,   148,     0,
   149,   150,    29,     0,    30,    31,    32,     0,     0,   146,
   147,     0,     0,   148,     0,   149,   150,     0,     0,    92,
     0,     0,     0,     0,   146,   147,    48,     0,   148,     0,
   149,   150,     0,    95,     0,     0,    51,     0,     0,   146,
   147,     0,     0,   148,     0,   149,   150,     0,     0,   151,
     0,   152,   153,   154,   155,     0,   156,   252,     0,   157,
     0,     0,   253,   158,   151,     0,   152,   153,   154,   155,
     0,   156,   255,     0,   157,   146,   147,   256,   158,   148,
     0,   149,   150,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   151,     0,   152,   153,   154,   155,   278,   156,
   279,     0,   157,   146,   147,     0,   158,   148,     0,   149,
   150,     0,     0,     0,     0,     0,   151,     0,   152,   153,
   154,   155,     0,   156,   321,     0,   157,     0,     0,   322,
   158,   151,     0,   152,   153,   154,   155,     0,   156,   323,
     0,   157,     0,     0,   324,   158,   151,     0,   152,   153,
   154,   155,     0,   156,     0,     0,   157,     0,     0,   242,
   158,   151,     0,   152,   153,   154,   155,     0,   156,     0,
     0,   157,   146,   147,   247,   158,   148,     0,   149,   150,
     0,     0,     0,     0,     0,   146,   147,     0,     0,   148,
     0,   149,   150,     0,     0,     0,     0,   151,     0,   152,
   153,   154,   155,     0,   156,   248,     0,   157,   146,   147,
     0,   158,   148,     0,   149,   150,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   151,     0,   152,   153,   154,
   155,     0,   156,   249,     0,   157,   146,   147,     0,   158,
   148,     0,   149,   150,     0,    29,     0,    30,    31,    32,
     0,   146,   147,     0,     0,   148,     0,   149,   150,     0,
     0,     0,    92,     0,   146,   147,     0,     0,   148,    48,
   149,   150,     0,     0,     0,     0,   100,   146,   147,    51,
     0,   148,     0,   149,   150,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   151,     0,   152,   153,   154,   155,
     0,   156,   254,     0,   157,     0,     0,   151,   158,   152,
   153,   154,   155,     0,   156,     0,     0,   157,   146,   147,
   258,   158,   148,     0,   149,   150,     0,     0,     0,     0,
   151,     0,   152,   153,   154,   155,     0,   156,     0,     0,
   157,   146,   147,   260,   158,   148,     0,   149,   150,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   151,     0,
   152,   153,   154,   155,     0,   156,     0,     0,   157,     0,
     0,   274,   158,   151,     0,   152,   153,   154,   155,     0,
   156,   286,     0,   157,     0,     0,   151,   158,   152,   153,
   154,   155,   289,   156,     0,     0,   157,     0,     0,   151,
   158,   152,   153,   154,   155,     0,   156,     0,     0,   157,
   146,   147,   304,   158,   148,     0,   149,   150,     0,     0,
     0,     0,     0,   146,   147,     0,     0,   148,     0,   149,
   150,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   151,     0,   152,   153,   154,   155,     0,   156,     0,     0,
   157,   146,   147,   231,   158,   148,     0,   149,   150,     0,
     0,     0,     0,   151,     0,   152,   153,   154,   155,     0,
   156,   311,     0,   157,   146,   147,     0,   158,   148,     0,
   149,   150,     0,    29,     0,    30,    31,    32,     0,   146,
   147,     0,     0,   148,     0,   149,   150,     0,     0,     0,
    92,     0,   146,   147,     0,     0,   148,    48,   149,   150,
     0,     0,     0,     0,   110,   146,   147,    51,     0,   148,
     0,   149,   150,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   151,     0,   152,   153,   154,   155,     0,   156,
   315,     0,   157,     0,     0,   151,   158,   152,   153,   154,
   155,     0,   156,     0,     0,   157,   146,   147,   317,   158,
   148,     0,   149,   150,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   151,     0,   152,   153,   154,   155,     0,
   156,   318,     0,   157,   146,   147,     0,   158,   148,     0,
   149,   150,     0,     0,     0,     0,   151,     0,   152,   153,
   154,   155,     0,   156,     0,     0,   157,     0,     0,   319,
   158,   151,     0,   152,   153,   154,   155,     0,   156,   320,
     0,   157,     0,     0,   151,   158,   152,   153,   154,   155,
   333,   156,     0,     0,   157,     0,     0,   151,   158,   152,
   153,   154,   155,     0,   156,     0,     0,   157,   146,   147,
   350,   158,   148,     0,   149,   150,     0,     0,     0,     0,
     0,   146,   147,     0,     0,   148,     0,   149,   150,     0,
    29,     0,    30,    31,    32,     0,     0,     0,   151,     0,
   152,   153,   154,   155,   351,   156,     0,    92,   157,   146,
   147,     0,   158,   148,    48,   149,   150,     0,     0,     0,
     0,   112,     0,     0,    51,     0,   151,     0,   152,   153,
   154,   155,     0,   156,     0,     0,   157,   146,   147,   356,
   158,   148,     0,   149,   150,    29,     0,    30,    31,    32,
     0,     0,   146,   147,     0,     0,   148,     0,   149,   150,
     0,     0,    92,     0,     0,     0,     0,   146,   147,    48,
     0,   148,     0,   149,   150,     0,   114,     0,     0,    51,
-32768,   147,     0,     0,   148,     0,   149,   150,     0,     0,
   151,     0,   152,   153,   154,   155,   357,   156,     0,     0,
   157,     0,     0,   151,   158,   152,   153,   154,   155,     0,
   156,     0,     0,   157,     0,     0,   358,   158,     0,     0,
     0,     0,     0,     0,     0,     0,    29,     0,    30,    31,
    32,   151,     0,   152,   153,   154,   155,     0,   156,     0,
     0,   157,     3,    92,   359,   158,     0,     4,   132,    87,
    48,     7,     0,     8,     9,     0,     0,   161,     0,   151,
    51,   152,   153,   154,   155,     0,   156,     0,     0,   157,
     0,     0,   360,   158,   151,     0,   152,   153,   154,   155,
   148,   156,     0,   150,   157,     0,     0,   361,   158,   151,
     0,   152,   153,   154,   155,     0,   156,     0,     0,   157,
     0,     0,   151,   158,   152,   153,   154,   155,     3,   156,
     0,     0,   157,    86,     0,    87,   158,     7,     0,    88,
     9,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,     0,     0,     0,     0,     0,     0,     0,     0,
    29,     0,    30,    31,    32,     0,     0,     0,     0,    37,
    38,     0,     0,     0,     0,     0,     0,    92,     0,     0,
     0,     0,    47,     0,    48,     0,     0,     0,     3,     0,
     0,    50,     0,    86,    51,    87,     0,     7,     0,    88,
     9,     0,     0,     0,     0,     0,     0,    11,    12,    13,
    14,    15,    16,    17,    18,    89,    90,    91,   151,     0,
   152,   153,   154,   155,     0,   156,    29,     0,    30,    31,
    32,     0,   158,     0,     0,    37,    38,     0,     0,     0,
     0,     0,     3,    92,     0,     0,     0,    86,    47,    87,
    48,     7,     0,    88,     9,     0,     0,    50,   185,     0,
    51,     0,     0,     0,     0,     0,     0,    11,    12,    13,
    14,    15,    16,    17,    18,    89,    90,    91,     0,     0,
     0,     0,     0,     0,     0,     0,    29,     0,    30,    31,
    32,     0,     0,     0,     0,    37,    38,     0,     0,     0,
     3,     0,     0,    92,     0,    86,     0,    87,    47,     7,
    48,    88,     9,     0,     0,     0,     0,    50,   188,     0,
    51,    11,    12,    13,    14,    15,    16,    17,    18,    89,
    90,    91,     0,     0,     0,     0,     0,     0,     0,     0,
    29,     0,    30,    31,    32,     0,     0,     0,     0,    37,
    38,     0,     0,     0,     3,     0,     0,    92,     0,    86,
     0,    87,    47,     7,    48,    88,     9,     0,     0,     0,
     0,    50,   209,     0,    51,     0,     0,     0,     0,    11,
    12,    13,    14,    15,    16,    17,    18,    89,    90,    91,
     0,     0,     0,     0,     0,     0,     0,     0,    29,     0,
    30,    31,    32,     0,     0,     0,     0,    37,    38,     0,
     0,     0,     3,     0,     0,    92,     0,    86,     0,    87,
    47,     7,    48,    88,     9,     0,     0,     0,     0,    50,
   216,     0,    51,    11,    12,    13,    14,    15,    16,    17,
    18,    89,    90,    91,     0,     0,     0,     0,     0,     0,
     0,     0,    29,     0,    30,    31,    32,     0,     0,     0,
     0,    37,    38,     0,     0,     0,     3,     0,     0,    92,
     0,    86,     0,    87,    47,     7,    48,    88,     9,     0,
     0,     0,     0,    50,   233,     0,    51,     0,     0,     0,
     0,    11,    12,    13,    14,    15,    16,    17,    18,    89,
    90,    91,     0,     0,     0,     0,     0,     0,     0,     0,
    29,     0,    30,    31,    32,     0,     0,     0,     0,    37,
    38,     0,   193,   194,   195,     0,     7,    92,   196,     9,
     0,     0,    47,     0,    48,     0,     0,     0,     0,     0,
     0,    50,     0,     0,    51,    11,    12,    13,    14,    15,
    16,    17,    18,    89,    90,    91,     0,     0,     0,     0,
     0,     0,     0,     0,    29,     0,    30,    31,    32,     0,
     0,     0,     0,    37,    38,     0,     0,     0,     0,     0,
     0,    92,     0,     0,     0,     0,    47,     0,    48,     0,
     0,     0,     0,     0,     0,   173,     0,     0,    51,     0,
     0,     0,     0,     0,   197,   198,   199,     0,     0,     0,
     0,     0,     0,     0,     0,    29,     0,    30,    31,    32,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    92,     0,     0,     0,     0,     0,     0,    48,
     0,     0,     0,     0,     0,     0,     0,   200,     0,    51
};

static const short yycheck[] = {     1,
    11,   339,   134,   106,   109,   106,   107,     1,   133,     4,
    11,   237,     7,   138,     9,    10,   137,   243,   124,   133,
     3,    23,     4,     5,   138,   363,     8,   133,   134,     3,
     4,   134,   137,     7,   107,     9,    10,    19,    20,    21,
   124,   106,   107,    25,     7,    28,    48,    10,   133,   133,
    44,   133,   131,   138,   133,   106,   138,   108,   109,   110,
    62,    44,   133,   137,    47,   137,   133,   138,    51,   137,
     7,   138,   123,    10,     3,     4,   137,    60,     7,   130,
     9,    10,    64,   137,   310,   107,    11,   133,    11,   140,
   112,    73,   138,    76,     3,     4,   137,   133,     7,   137,
     9,    10,   138,    45,    46,   137,   137,   109,   106,    11,
   112,     7,    95,   124,    10,   106,    99,   100,   137,   102,
   103,   104,   105,   106,   107,   108,   137,   110,   122,   131,
   125,   114,   127,   128,   129,   130,   137,   132,   137,   106,
   122,   143,   106,   130,   139,     7,   129,   137,    10,   137,
   132,   125,   133,   127,   128,   129,   130,   131,   132,   161,
   142,   135,   145,   146,   147,   139,   149,   130,   151,   152,
   153,   154,   155,   156,   157,   158,   139,   134,   137,   137,
     3,     4,   164,   137,     7,   167,     9,    10,   171,   137,
   173,   137,   129,   130,   177,   132,   125,   137,   127,   128,
   129,   130,   139,   132,   107,   133,   135,   130,   133,   106,
   139,   140,   137,   138,   137,   124,   125,   134,   127,   128,
   129,   130,   205,   132,   134,   107,   135,   133,   130,   138,
   139,   127,   128,   129,   130,   137,   132,   138,   133,   138,
   138,   107,   106,   139,   138,   138,   138,   230,   138,   138,
   134,   107,   133,   133,   237,   238,   130,   109,     0,   138,
   243,   244,   138,   138,   133,   248,   249,   250,   130,   252,
   132,   254,   255,   138,   268,     0,     1,   139,   138,   138,
   138,   138,   137,     8,   286,   138,   133,   138,    13,    14,
    15,   280,    17,     5,    19,    20,   279,    44,   168,   363,
   349,    -1,   125,    -1,   127,   128,   129,   130,    -1,   132,
   133,    -1,   135,    38,    -1,   138,   139,     3,     4,    -1,
    -1,     7,    -1,     9,    10,    -1,    -1,   310,   311,   312,
    -1,    -1,   315,   316,    -1,   318,    -1,   320,   321,    -1,
   323,     3,     4,    -1,    -1,     7,    -1,     9,    10,    13,
    14,    15,   354,    17,    -1,    19,    20,    -1,    -1,    -1,
    -1,    -1,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,    -1,   103,   104,
   105,   106,    -1,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,    -1,
   125,    -1,    -1,   128,    -1,   130,    -1,     3,     4,   134,
    -1,     7,   137,     9,    10,   140,    -1,    -1,    -1,    -1,
    -1,    -1,     3,     4,    -1,    -1,     7,    -1,     9,    10,
    -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,   125,
    -1,   127,   128,   129,   130,    -1,   132,   133,    -1,   135,
     3,     4,   138,   139,     7,    -1,     9,    10,    -1,    -1,
    -1,    -1,    -1,   125,    -1,   127,   128,   129,   130,    -1,
   132,   133,    -1,   135,     3,     4,   138,   139,     7,    -1,
     9,    10,   106,    -1,   108,   109,   110,    -1,    -1,     3,
     4,    -1,    -1,     7,    -1,     9,    10,    -1,    -1,   123,
    -1,    -1,    -1,    -1,     3,     4,   130,    -1,     7,    -1,
     9,    10,    -1,   137,    -1,    -1,   140,    -1,    -1,     3,
     4,    -1,    -1,     7,    -1,     9,    10,    -1,    -1,   125,
    -1,   127,   128,   129,   130,    -1,   132,   133,    -1,   135,
    -1,    -1,   138,   139,   125,    -1,   127,   128,   129,   130,
    -1,   132,   133,    -1,   135,     3,     4,   138,   139,     7,
    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   125,    -1,   127,   128,   129,   130,   131,   132,
   133,    -1,   135,     3,     4,    -1,   139,     7,    -1,     9,
    10,    -1,    -1,    -1,    -1,    -1,   125,    -1,   127,   128,
   129,   130,    -1,   132,   133,    -1,   135,    -1,    -1,   138,
   139,   125,    -1,   127,   128,   129,   130,    -1,   132,   133,
    -1,   135,    -1,    -1,   138,   139,   125,    -1,   127,   128,
   129,   130,    -1,   132,    -1,    -1,   135,    -1,    -1,   138,
   139,   125,    -1,   127,   128,   129,   130,    -1,   132,    -1,
    -1,   135,     3,     4,   138,   139,     7,    -1,     9,    10,
    -1,    -1,    -1,    -1,    -1,     3,     4,    -1,    -1,     7,
    -1,     9,    10,    -1,    -1,    -1,    -1,   125,    -1,   127,
   128,   129,   130,    -1,   132,   133,    -1,   135,     3,     4,
    -1,   139,     7,    -1,     9,    10,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   125,    -1,   127,   128,   129,
   130,    -1,   132,   133,    -1,   135,     3,     4,    -1,   139,
     7,    -1,     9,    10,    -1,   106,    -1,   108,   109,   110,
    -1,     3,     4,    -1,    -1,     7,    -1,     9,    10,    -1,
    -1,    -1,   123,    -1,     3,     4,    -1,    -1,     7,   130,
     9,    10,    -1,    -1,    -1,    -1,   137,     3,     4,   140,
    -1,     7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   125,    -1,   127,   128,   129,   130,
    -1,   132,   133,    -1,   135,    -1,    -1,   125,   139,   127,
   128,   129,   130,    -1,   132,    -1,    -1,   135,     3,     4,
   138,   139,     7,    -1,     9,    10,    -1,    -1,    -1,    -1,
   125,    -1,   127,   128,   129,   130,    -1,   132,    -1,    -1,
   135,     3,     4,   138,   139,     7,    -1,     9,    10,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,
   127,   128,   129,   130,    -1,   132,    -1,    -1,   135,    -1,
    -1,   138,   139,   125,    -1,   127,   128,   129,   130,    -1,
   132,   133,    -1,   135,    -1,    -1,   125,   139,   127,   128,
   129,   130,   131,   132,    -1,    -1,   135,    -1,    -1,   125,
   139,   127,   128,   129,   130,    -1,   132,    -1,    -1,   135,
     3,     4,   138,   139,     7,    -1,     9,    10,    -1,    -1,
    -1,    -1,    -1,     3,     4,    -1,    -1,     7,    -1,     9,
    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   125,    -1,   127,   128,   129,   130,    -1,   132,    -1,    -1,
   135,     3,     4,   138,   139,     7,    -1,     9,    10,    -1,
    -1,    -1,    -1,   125,    -1,   127,   128,   129,   130,    -1,
   132,   133,    -1,   135,     3,     4,    -1,   139,     7,    -1,
     9,    10,    -1,   106,    -1,   108,   109,   110,    -1,     3,
     4,    -1,    -1,     7,    -1,     9,    10,    -1,    -1,    -1,
   123,    -1,     3,     4,    -1,    -1,     7,   130,     9,    10,
    -1,    -1,    -1,    -1,   137,     3,     4,   140,    -1,     7,
    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   125,    -1,   127,   128,   129,   130,    -1,   132,
   133,    -1,   135,    -1,    -1,   125,   139,   127,   128,   129,
   130,    -1,   132,    -1,    -1,   135,     3,     4,   138,   139,
     7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   125,    -1,   127,   128,   129,   130,    -1,
   132,   133,    -1,   135,     3,     4,    -1,   139,     7,    -1,
     9,    10,    -1,    -1,    -1,    -1,   125,    -1,   127,   128,
   129,   130,    -1,   132,    -1,    -1,   135,    -1,    -1,   138,
   139,   125,    -1,   127,   128,   129,   130,    -1,   132,   133,
    -1,   135,    -1,    -1,   125,   139,   127,   128,   129,   130,
   131,   132,    -1,    -1,   135,    -1,    -1,   125,   139,   127,
   128,   129,   130,    -1,   132,    -1,    -1,   135,     3,     4,
   138,   139,     7,    -1,     9,    10,    -1,    -1,    -1,    -1,
    -1,     3,     4,    -1,    -1,     7,    -1,     9,    10,    -1,
   106,    -1,   108,   109,   110,    -1,    -1,    -1,   125,    -1,
   127,   128,   129,   130,   131,   132,    -1,   123,   135,     3,
     4,    -1,   139,     7,   130,     9,    10,    -1,    -1,    -1,
    -1,   137,    -1,    -1,   140,    -1,   125,    -1,   127,   128,
   129,   130,    -1,   132,    -1,    -1,   135,     3,     4,   138,
   139,     7,    -1,     9,    10,   106,    -1,   108,   109,   110,
    -1,    -1,     3,     4,    -1,    -1,     7,    -1,     9,    10,
    -1,    -1,   123,    -1,    -1,    -1,    -1,     3,     4,   130,
    -1,     7,    -1,     9,    10,    -1,   137,    -1,    -1,   140,
     3,     4,    -1,    -1,     7,    -1,     9,    10,    -1,    -1,
   125,    -1,   127,   128,   129,   130,   131,   132,    -1,    -1,
   135,    -1,    -1,   125,   139,   127,   128,   129,   130,    -1,
   132,    -1,    -1,   135,    -1,    -1,   138,   139,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   106,    -1,   108,   109,
   110,   125,    -1,   127,   128,   129,   130,    -1,   132,    -1,
    -1,   135,     8,   123,   138,   139,    -1,    13,    14,    15,
   130,    17,    -1,    19,    20,    -1,    -1,   137,    -1,   125,
   140,   127,   128,   129,   130,    -1,   132,    -1,    -1,   135,
    -1,    -1,   138,   139,   125,    -1,   127,   128,   129,   130,
     7,   132,    -1,    10,   135,    -1,    -1,   138,   139,   125,
    -1,   127,   128,   129,   130,    -1,   132,    -1,    -1,   135,
    -1,    -1,   125,   139,   127,   128,   129,   130,     8,   132,
    -1,    -1,   135,    13,    -1,    15,   139,    17,    -1,    19,
    20,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,   115,
   116,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,
    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,     8,    -1,
    -1,   137,    -1,    13,   140,    15,    -1,    17,    -1,    19,
    20,    -1,    -1,    -1,    -1,    -1,    -1,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,   125,    -1,
   127,   128,   129,   130,    -1,   132,   106,    -1,   108,   109,
   110,    -1,   139,    -1,    -1,   115,   116,    -1,    -1,    -1,
    -1,    -1,     8,   123,    -1,    -1,    -1,    13,   128,    15,
   130,    17,    -1,    19,    20,    -1,    -1,   137,   138,    -1,
   140,    -1,    -1,    -1,    -1,    -1,    -1,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   106,    -1,   108,   109,
   110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,
     8,    -1,    -1,   123,    -1,    13,    -1,    15,   128,    17,
   130,    19,    20,    -1,    -1,    -1,    -1,   137,   138,    -1,
   140,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,   115,
   116,    -1,    -1,    -1,     8,    -1,    -1,   123,    -1,    13,
    -1,    15,   128,    17,   130,    19,    20,    -1,    -1,    -1,
    -1,   137,   138,    -1,   140,    -1,    -1,    -1,    -1,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,    -1,
   108,   109,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
    -1,    -1,     8,    -1,    -1,   123,    -1,    13,    -1,    15,
   128,    17,   130,    19,    20,    -1,    -1,    -1,    -1,   137,
   138,    -1,   140,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   106,    -1,   108,   109,   110,    -1,    -1,    -1,
    -1,   115,   116,    -1,    -1,    -1,     8,    -1,    -1,   123,
    -1,    13,    -1,    15,   128,    17,   130,    19,    20,    -1,
    -1,    -1,    -1,   137,   138,    -1,   140,    -1,    -1,    -1,
    -1,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   106,    -1,   108,   109,   110,    -1,    -1,    -1,    -1,   115,
   116,    -1,    13,    14,    15,    -1,    17,   123,    19,    20,
    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,    -1,    -1,
    -1,   137,    -1,    -1,   140,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   106,    -1,   108,   109,   110,    -1,
    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,    -1,
    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,   130,    -1,
    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,   140,    -1,
    -1,    -1,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   106,    -1,   108,   109,   110,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,   130,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,    -1,   140
};
#define YYPURE 1

/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 2:
#line 364 "grammar.y"
{
            if (timerv)
            {
              writeTime("used time:");
              startTimer();
            }
            #ifdef HAVE_RTIMER
            if (rtimerv)
            {
              writeRTime("used real time:");
              startRTimer();
            }
            #endif
            prompt_char = '>';
#ifdef HAVE_SDB
            if (sdb_flags & 2) { sdb_flags=1; YYERROR; }
#endif
            if(siCntrlc)
            {
              siCntrlc=FALSE;
              MYYERROR("abort...");
            }
            if (errorreported)
            {
              yyerror("");
            }
            if (inerror==2) PrintLn();
            errorreported = inerror = cmdtok = 0;
            lastreserved = currid = NULL;
            expected_parms = siCntrlc = FALSE;
          ;
    break;}
case 4:
#line 400 "grammar.y"
{currentVoice->ifsw=0;;
    break;}
case 5:
#line 402 "grammar.y"
{ yyvsp[-1].lv.CleanUp(); currentVoice->ifsw=0;;
    break;}
case 6:
#line 404 "grammar.y"
{
            YYACCEPT;
          ;
    break;}
case 7:
#line 408 "grammar.y"
{
            currentVoice->ifsw=0;
            iiDebug();
          ;
    break;}
case 8:
#line 413 "grammar.y"
{currentVoice->ifsw=0;;
    break;}
case 9:
#line 415 "grammar.y"
{
            #ifdef SIQ
            siq=0;
            #endif
            yyInRingConstruction = FALSE;
            currentVoice->ifsw=0;
            if (inerror)
            {
              if ((inerror!=3) && (yyvsp[-1].i<UMINUS) && (yyvsp[-1].i>' '))
              {
                // 1: yyerror called
                // 2: scanner put actual string
                // 3: error rule put token+\n
                inerror=3;
                Print(" error at token `%s`\n",iiTwoOps(yyvsp[-1].i));
              }
            }
            if (!errorreported) WerrorS("...parse error");
            yyerror("");
            yyerrok;
#ifdef HAVE_SDB
            if ((sdb_flags & 1) && currentVoice->pi!=NULL)
            {
              currentVoice->pi->trace_flag |=1;
            }
            else
#endif
            if (myynest>0)
            {
              feBufferTypes t=currentVoice->Typ();
              //PrintS("leaving yyparse\n");
              exitBuffer(BT_proc);
              if (t==BT_example)
                YYACCEPT;
              else
                YYABORT;
            }
            else if (currentVoice->prev!=NULL)
            {
              exitVoice();
            }
#ifdef HAVE_SDB
            if (sdb_flags &2) sdb_flags=1;
#endif
          ;
    break;}
case 17:
#line 470 "grammar.y"
{if (currentVoice!=NULL) currentVoice->ifsw=0;;
    break;}
case 18:
#line 473 "grammar.y"
{ omFree((ADDRESS)yyvsp[0].name); ;
    break;}
case 28:
#line 488 "grammar.y"
{
            if(iiAssign(&yyvsp[-1].lv,&yyvsp[0].lv)) YYERROR;
          ;
    break;}
case 29:
#line 495 "grammar.y"
{
            if (currRing==NULL) MYYERROR("no ring active");
            syMake(&yyval.lv,omStrDup(yyvsp[0].name));
          ;
    break;}
case 30:
#line 500 "grammar.y"
{
            syMake(&yyval.lv,yyvsp[0].name);
          ;
    break;}
case 31:
#line 504 "grammar.y"
{
            if(iiExprArith2(&yyval.lv, &yyvsp[-2].lv, COLONCOLON, &yyvsp[0].lv)) YYERROR;
          ;
    break;}
case 32:
#line 508 "grammar.y"
{
            if(iiExprArith1(&yyval.lv,&yyvsp[-2].lv,'(')) YYERROR;
          ;
    break;}
case 33:
#line 512 "grammar.y"
{
            if (yyvsp[-3].lv.rtyp==LIB_CMD)
            {
              if(iiExprArith1(&yyval.lv,&yyvsp[-1].lv,LIB_CMD)) YYERROR;
            }
            else
            {
              if (yyvsp[-3].lv.Typ()==UNKNOWN)
              {
                if(iiExprArith2(&yyval.lv,&yyvsp[-3].lv,'(',&yyvsp[-1].lv)) YYERROR;
              }
              else
              {
                yyvsp[-3].lv.next=(leftv)omAllocBin(sleftv_bin);
                memcpy(yyvsp[-3].lv.next,&yyvsp[-1].lv,sizeof(sleftv));
                if(iiExprArithM(&yyval.lv,&yyvsp[-3].lv,'(')) YYERROR;
              }
            }
          ;
    break;}
case 34:
#line 532 "grammar.y"
{
            if (currRingHdl==NULL) MYYERROR("no ring active");
            int j = 0;
            memset(&yyval.lv,0,sizeof(sleftv));
            yyval.lv.rtyp=VECTOR_CMD;
            leftv v = &yyvsp[-1].lv;
            while (v!=NULL)
            {
              int i,t;
              sleftv tmp;
              memset(&tmp,0,sizeof(tmp));
              i=iiTestConvert((t=v->Typ()),POLY_CMD);
              if((i==0) || (iiConvert(t /*v->Typ()*/,POLY_CMD,i,v,&tmp)))
              {
                pDelete((poly *)&yyval.lv.data);
                yyvsp[-1].lv.CleanUp();
                MYYERROR("expected '[poly,...'");
              }
              poly p = (poly)tmp.CopyD(POLY_CMD);
              pSetCompP(p,++j);
              yyval.lv.data = (void *)pAdd((poly)yyval.lv.data,p);
              v->next=tmp.next;tmp.next=NULL;
              tmp.CleanUp();
              v=v->next;
            }
            yyvsp[-1].lv.CleanUp();
          ;
    break;}
case 35:
#line 560 "grammar.y"
{
            memset(&yyval.lv,0,sizeof(yyval.lv));
            int i = atoi(yyvsp[0].name);
            /*remember not to omFree($1)
            *because it is a part of the scanner buffer*/
            yyval.lv.rtyp  = INT_CMD;
            yyval.lv.data = (void *)(long)i;

            /* check: out of range input */
            int l = strlen(yyvsp[0].name)+2;
            if (l >= MAX_INT_LEN)
            {
              char tmp[MAX_INT_LEN+5];
              sprintf(tmp,"%d",i);
              if (strcmp(tmp,yyvsp[0].name)!=0)
              {
                if (currRing==NULL)
                {
                  Werror("`%s` greater than %d(max. integer representation)"
                         ,yyvsp[0].name,MAX_INT_VAL);
                  YYERROR;
                }
                char *t1=omStrDup(yyvsp[0].name);
                syMake(&yyval.lv,t1);
              }
            }
          ;
    break;}
case 36:
#line 588 "grammar.y"
{
            memset(&yyval.lv,0,sizeof(yyval.lv));
            yyval.lv.rtyp = yyvsp[0].i;
            yyval.lv.data = yyval.lv.Data();
          ;
    break;}
case 37:
#line 594 "grammar.y"
{
            memset(&yyval.lv,0,sizeof(yyval.lv));
            yyval.lv.rtyp  = STRING_CMD;
            yyval.lv.data = yyvsp[0].name;
          ;
    break;}
case 38:
#line 603 "grammar.y"
{
            leftv v = &yyvsp[-2].lv;
            while (v->next!=NULL)
            {
              v=v->next;
            }
            v->next = (leftv)omAllocBin(sleftv_bin);
            memcpy(v->next,&(yyvsp[0].lv),sizeof(sleftv));
            yyval.lv = yyvsp[-2].lv;
          ;
    break;}
case 39:
#line 614 "grammar.y"
{
            yyval.lv = yyvsp[0].lv;
          ;
    break;}
case 40:
#line 620 "grammar.y"
{
            /*if ($1.typ == eunknown) YYERROR;*/
            yyval.lv = yyvsp[0].lv;
          ;
    break;}
case 41:
#line 624 "grammar.y"
{ yyval.lv = yyvsp[0].lv; ;
    break;}
case 42:
#line 625 "grammar.y"
{ yyval.lv = yyvsp[-1].lv; ;
    break;}
case 43:
#line 627 "grammar.y"
{
            if(iiExprArith3(&yyval.lv,'[',&yyvsp[-5].lv,&yyvsp[-3].lv,&yyvsp[-1].lv)) YYERROR;
          ;
    break;}
case 44:
#line 631 "grammar.y"
{
            if(iiExprArith2(&yyval.lv,&yyvsp[-3].lv,'[',&yyvsp[-1].lv)) YYERROR;
          ;
    break;}
case 45:
#line 635 "grammar.y"
{
            if(iiExprArith1(&yyval.lv,&yyvsp[-1].lv,yyvsp[-3].i)) YYERROR;
          ;
    break;}
case 46:
#line 639 "grammar.y"
{
            if(iiExprArithM(&yyval.lv,&yyvsp[-1].lv,yyvsp[-3].i)) YYERROR;
          ;
    break;}
case 47:
#line 643 "grammar.y"
{
            if(iiExprArithM(&yyval.lv,NULL,yyvsp[-2].i)) YYERROR;
          ;
    break;}
case 48:
#line 647 "grammar.y"
{
            if(iiExprArith1(&yyval.lv,&yyvsp[-1].lv,yyvsp[-3].i)) YYERROR;
          ;
    break;}
case 49:
#line 651 "grammar.y"
{
            if(iiExprArithM(&yyval.lv,&yyvsp[-1].lv,yyvsp[-3].i)) YYERROR;
          ;
    break;}
case 50:
#line 655 "grammar.y"
{
            if(iiExprArithM(&yyval.lv,NULL,yyvsp[-2].i)) YYERROR;
          ;
    break;}
case 51:
#line 659 "grammar.y"
{
            if(iiExprArith1(&yyval.lv,&yyvsp[-1].lv,yyvsp[-3].i)) YYERROR;
          ;
    break;}
case 52:
#line 663 "grammar.y"
{
            if(iiExprArith2(&yyval.lv,&yyvsp[-3].lv,yyvsp[-5].i,&yyvsp[-1].lv,TRUE)) YYERROR;
          ;
    break;}
case 53:
#line 667 "grammar.y"
{
            if(iiExprArith3(&yyval.lv,yyvsp[-7].i,&yyvsp[-5].lv,&yyvsp[-3].lv,&yyvsp[-1].lv)) YYERROR;
          ;
    break;}
case 54:
#line 671 "grammar.y"
{
            if(iiExprArith2(&yyval.lv,&yyvsp[-3].lv,yyvsp[-5].i,&yyvsp[-1].lv,TRUE)) YYERROR;
          ;
    break;}
case 55:
#line 675 "grammar.y"
{
            if(iiExprArith3(&yyval.lv,yyvsp[-7].i,&yyvsp[-5].lv,&yyvsp[-3].lv,&yyvsp[-1].lv)) YYERROR;
          ;
    break;}
case 56:
#line 679 "grammar.y"
{
            if(iiExprArith1(&yyval.lv,&yyvsp[-1].lv,yyvsp[-3].i)) YYERROR;
          ;
    break;}
case 57:
#line 683 "grammar.y"
{
            if(iiExprArith1(&yyval.lv,&yyvsp[-1].lv,yyvsp[-3].i)) YYERROR;
          ;
    break;}
case 58:
#line 687 "grammar.y"
{
            if(iiExprArith2(&yyval.lv,&yyvsp[-3].lv,yyvsp[-5].i,&yyvsp[-1].lv,TRUE)) YYERROR;
          ;
    break;}
case 59:
#line 691 "grammar.y"
{
            if(iiExprArith1(&yyval.lv,&yyvsp[-1].lv,yyvsp[-3].i)) YYERROR;
          ;
    break;}
case 60:
#line 695 "grammar.y"
{
            if(iiExprArith2(&yyval.lv,&yyvsp[-3].lv,yyvsp[-5].i,&yyvsp[-1].lv,TRUE)) YYERROR;
          ;
    break;}
case 61:
#line 699 "grammar.y"
{
            if(iiExprArith3(&yyval.lv,yyvsp[-7].i,&yyvsp[-5].lv,&yyvsp[-3].lv,&yyvsp[-1].lv)) YYERROR;
          ;
    break;}
case 62:
#line 703 "grammar.y"
{
            if(iiExprArith3(&yyval.lv,yyvsp[-7].i,&yyvsp[-5].lv,&yyvsp[-3].lv,&yyvsp[-1].lv)) YYERROR;
          ;
    break;}
case 63:
#line 707 "grammar.y"
{
            if(iiExprArithM(&yyval.lv,NULL,yyvsp[-2].i)) YYERROR;
          ;
    break;}
case 64:
#line 711 "grammar.y"
{
            if(iiExprArithM(&yyval.lv,&yyvsp[-1].lv,yyvsp[-3].i)) YYERROR;
          ;
    break;}
case 65:
#line 715 "grammar.y"
{
            if(iiExprArith3(&yyval.lv,MATRIX_CMD,&yyvsp[-5].lv,&yyvsp[-3].lv,&yyvsp[-1].lv)) YYERROR;
          ;
    break;}
case 66:
#line 719 "grammar.y"
{
            if(iiExprArith1(&yyval.lv,&yyvsp[-1].lv,MATRIX_CMD)) YYERROR;
          ;
    break;}
case 67:
#line 723 "grammar.y"
{
            if(iiExprArith3(&yyval.lv,INTMAT_CMD,&yyvsp[-5].lv,&yyvsp[-3].lv,&yyvsp[-1].lv)) YYERROR;
          ;
    break;}
case 68:
#line 727 "grammar.y"
{
            if(iiExprArith1(&yyval.lv,&yyvsp[-1].lv,INTMAT_CMD)) YYERROR;
          ;
    break;}
case 69:
#line 731 "grammar.y"
{
            if(iiExprArith3(&yyval.lv,RING_CMD,&yyvsp[-5].lv,&yyvsp[-3].lv,&yyvsp[-1].lv)) YYERROR;
          ;
    break;}
case 70:
#line 735 "grammar.y"
{
            if(iiExprArith1(&yyval.lv,&yyvsp[-1].lv,RING_CMD)) YYERROR;
          ;
    break;}
case 71:
#line 739 "grammar.y"
{
            yyval.lv=yyvsp[-1].lv;
          ;
    break;}
case 72:
#line 743 "grammar.y"
{
            #ifdef SIQ
            siq++;
            if (siq>0)
            { if (iiExprArith2(&yyval.lv,&yyvsp[-3].lv,'=',&yyvsp[-1].lv)) YYERROR; }
            else
            #endif
            {
              memset(&yyval.lv,0,sizeof(yyval.lv));
              yyval.lv.rtyp=NONE;
              if (iiAssign(&yyvsp[-3].lv,&yyvsp[-1].lv)) YYERROR;
            }
            #ifdef SIQ
            siq--;
            #endif
          ;
    break;}
case 73:
#line 760 "grammar.y"
{
            #ifdef SIQ
            siq--;
            #endif
          ;
    break;}
case 74:
#line 766 "grammar.y"
{
            #ifdef SIQ
            if (siq<=0) yyvsp[-1].lv.Eval();
            #endif
            yyval.lv=yyvsp[-1].lv;
            #ifdef SIQ
            siq++;
            #endif
          ;
    break;}
case 75:
#line 778 "grammar.y"
{
            #ifdef SIQ
            siq++;
            #endif
          ;
    break;}
case 76:
#line 786 "grammar.y"
{
            #ifdef SIQ
            siq--;
            #endif
          ;
    break;}
case 77:
#line 795 "grammar.y"
{
            if(iiExprArith1(&yyval.lv,&yyvsp[-1].lv,PLUSPLUS)) YYERROR;
          ;
    break;}
case 78:
#line 799 "grammar.y"
{
            if(iiExprArith1(&yyval.lv,&yyvsp[-1].lv,MINUSMINUS)) YYERROR;
          ;
    break;}
case 79:
#line 803 "grammar.y"
{
            if(iiExprArith2(&yyval.lv,&yyvsp[-2].lv,'+',&yyvsp[0].lv)) YYERROR;
          ;
    break;}
case 80:
#line 807 "grammar.y"
{
            if(iiExprArith2(&yyval.lv,&yyvsp[-2].lv,'-',&yyvsp[0].lv)) YYERROR;
          ;
    break;}
case 81:
#line 811 "grammar.y"
{
            if(iiExprArith2(&yyval.lv,&yyvsp[-2].lv,yyvsp[-1].i,&yyvsp[0].lv)) YYERROR;
          ;
    break;}
case 82:
#line 815 "grammar.y"
{
            if(iiExprArith2(&yyval.lv,&yyvsp[-2].lv,'^',&yyvsp[0].lv)) YYERROR;
          ;
    break;}
case 83:
#line 819 "grammar.y"
{
            if(iiExprArith2(&yyval.lv,&yyvsp[-2].lv,yyvsp[-1].i,&yyvsp[0].lv)) YYERROR;
          ;
    break;}
case 84:
#line 823 "grammar.y"
{
            if(iiExprArith2(&yyval.lv,&yyvsp[-2].lv,yyvsp[-1].i,&yyvsp[0].lv)) YYERROR;
          ;
    break;}
case 85:
#line 827 "grammar.y"
{
            if(iiExprArith2(&yyval.lv,&yyvsp[-2].lv,NOTEQUAL,&yyvsp[0].lv)) YYERROR;
          ;
    break;}
case 86:
#line 831 "grammar.y"
{
            if(iiExprArith2(&yyval.lv,&yyvsp[-2].lv,EQUAL_EQUAL,&yyvsp[0].lv)) YYERROR;
          ;
    break;}
case 87:
#line 835 "grammar.y"
{
            if(iiExprArith2(&yyval.lv,&yyvsp[-2].lv,DOTDOT,&yyvsp[0].lv)) YYERROR;
          ;
    break;}
case 88:
#line 839 "grammar.y"
{
            if(iiExprArith2(&yyval.lv,&yyvsp[-2].lv,':',&yyvsp[0].lv)) YYERROR;
          ;
    break;}
case 89:
#line 843 "grammar.y"
{
            memset(&yyval.lv,0,sizeof(yyval.lv));
            int i; TESTSETINT(yyvsp[0].lv,i);
            yyval.lv.rtyp  = INT_CMD;
            yyval.lv.data = (void *)(long)(i == 0 ? 1 : 0);
          ;
    break;}
case 90:
#line 850 "grammar.y"
{
            if(iiExprArith1(&yyval.lv,&yyvsp[0].lv,'-')) YYERROR;
          ;
    break;}
case 91:
#line 856 "grammar.y"
{ yyval.lv = yyvsp[-1].lv; ;
    break;}
case 92:
#line 858 "grammar.y"
{
            if (yyvsp[-1].lv.rtyp==0)
            {
              Werror("`%s` is undefined",yyvsp[-1].lv.Fullname());
              YYERROR;
            }
            yyval.lv = yyvsp[-1].lv;
          ;
    break;}
case 94:
#line 872 "grammar.y"
{
            if (yyvsp[-1].lv.Typ()!=STRING_CMD)
            {
              MYYERROR("string expression expected");
            }
            yyval.name = (char *)yyvsp[-1].lv.CopyD(STRING_CMD);
            yyvsp[-1].lv.CleanUp();
          ;
    break;}
case 97:
#line 889 "grammar.y"
{
            #ifdef HAVE_NS
            if (iiDeclCommand(&yyval.lv,&yyvsp[0].lv,myynest,yyvsp[-1].i,&(yyvsp[0].lv.req_packhdl->idroot)))
              YYERROR;
            #else
            if (iiDeclCommand(&yyval.lv,&yyvsp[0].lv,myynest,yyvsp[-1].i,&IDROOT)) YYERROR;
            #endif
          ;
    break;}
case 98:
#line 898 "grammar.y"
{
            #ifdef HAVE_NS
            if (iiDeclCommand(&yyval.lv,&yyvsp[0].lv,myynest,yyvsp[-1].i,&(yyvsp[0].lv.req_packhdl->idroot)))
              YYERROR;
            #else
            if (iiDeclCommand(&yyval.lv,&yyvsp[0].lv,myynest,yyvsp[-1].i,&IDROOT)) YYERROR;
            #endif
          ;
    break;}
case 99:
#line 907 "grammar.y"
{
            if (iiDeclCommand(&yyval.lv,&yyvsp[0].lv,myynest,yyvsp[-1].i,&(currRing->idroot), TRUE)) YYERROR;
          ;
    break;}
case 100:
#line 911 "grammar.y"
{
            if (iiDeclCommand(&yyval.lv,&yyvsp[0].lv,myynest,yyvsp[-1].i,&(currRing->idroot), TRUE)) YYERROR;
          ;
    break;}
case 101:
#line 915 "grammar.y"
{
            if (iiDeclCommand(&yyval.lv,&yyvsp[-6].lv,myynest,yyvsp[-7].i,&(currRing->idroot), TRUE)) YYERROR;
            int r; TESTSETINT(yyvsp[-4].lv,r);
            int c; TESTSETINT(yyvsp[-1].lv,c);
            if (r < 1)
              MYYERROR("rows must be greater than 0");
            if (c < 0)
              MYYERROR("cols must be greater than -1");
            leftv v=&yyval.lv;
            //while (v->next!=NULL) { v=v->next; }
            idhdl h=(idhdl)v->data;
            idDelete(&IDIDEAL(h));
            IDMATRIX(h) = mpNew(r,c);
            if (IDMATRIX(h)==NULL) YYERROR;
          ;
    break;}
case 102:
#line 931 "grammar.y"
{
            if (iiDeclCommand(&yyval.lv,&yyvsp[0].lv,myynest,yyvsp[-1].i,&(currRing->idroot), TRUE)) YYERROR;
          ;
    break;}
case 103:
#line 935 "grammar.y"
{
            int r; TESTSETINT(yyvsp[-4].lv,r);
            int c; TESTSETINT(yyvsp[-1].lv,c);
            if (r < 1)
              MYYERROR("rows must be greater than 0");
            if (c < 0)
              MYYERROR("cols must be greater than -1");
            #ifdef HAVE_NS
            if (iiDeclCommand(&yyval.lv,&yyvsp[-6].lv,myynest,yyvsp[-7].i,&(yyvsp[-6].lv.req_packhdl->idroot)))
              YYERROR;
            #else
            if (iiDeclCommand(&yyval.lv,&yyvsp[-6].lv,myynest,yyvsp[-7].i,&IDROOT)) YYERROR;
            #endif
            leftv v=&yyval.lv;
            idhdl h=(idhdl)v->data;
            delete IDINTVEC(h);
            IDINTVEC(h) = new intvec(r,c,0);
            if (IDINTVEC(h)==NULL) YYERROR;
          ;
    break;}
case 104:
#line 955 "grammar.y"
{
            #ifdef HAVE_NS
            if (iiDeclCommand(&yyval.lv,&yyvsp[0].lv,myynest,yyvsp[-1].i,&(yyvsp[0].lv.req_packhdl->idroot)))
              YYERROR;
            #else
            if (iiDeclCommand(&yyval.lv,&yyvsp[0].lv,myynest,yyvsp[-1].i,&IDROOT)) YYERROR;
            #endif
            leftv v=&yyval.lv;
            idhdl h;
            do
            {
               h=(idhdl)v->data;
               delete IDINTVEC(h);
               IDINTVEC(h) = new intvec(1,1,0);
               v=v->next;
            } while (v!=NULL);
          ;
    break;}
case 105:
#line 973 "grammar.y"
{
            int t=yyvsp[-2].lv.Typ();
            sleftv r;
            memset(&r,0,sizeof(sleftv));
            if ((BEGIN_RING<t) && (t<END_RING))
            {
              if (iiDeclCommand(&r,&yyvsp[0].lv,myynest,t,&(currRing->idroot), TRUE))
                YYERROR;
            }
            else
            {
              #ifdef HAVE_NS
              if (iiDeclCommand(&r,&yyvsp[0].lv,myynest,t,&(yyvsp[0].lv.req_packhdl->idroot)))
                YYERROR;
              #else
              if (iiDeclCommand(&r,&yyvsp[0].lv,myynest,t,&IDROOT)) YYERROR;
              #endif
            }
            leftv v=&yyvsp[-2].lv;
            while (v->next!=NULL) v=v->next;
            v->next=(leftv)omAllocBin(sleftv_bin);
            memcpy(v->next,&r,sizeof(sleftv));
            yyval.lv=yyvsp[-2].lv;
          ;
    break;}
case 106:
#line 998 "grammar.y"
{
            #ifdef HAVE_NS
            if (iiDeclCommand(&yyval.lv,&yyvsp[0].lv,myynest,yyvsp[-1].i,&(yyvsp[0].lv.req_packhdl->idroot)))
              YYERROR;
            #else
            if (iiDeclCommand(&yyval.lv,&yyvsp[0].lv,myynest,yyvsp[-1].i,&IDROOT)) YYERROR;
            #endif
          ;
    break;}
case 109:
#line 1015 "grammar.y"
{
            leftv v = &yyvsp[-3].lv;
            while (v->next!=NULL)
            {
              v=v->next;
            }
            v->next = (leftv)omAllocBin(sleftv_bin);
            memcpy(v->next,&(yyvsp[-1].lv),sizeof(sleftv));
            yyval.lv = yyvsp[-3].lv;
          ;
    break;}
case 110:
#line 1029 "grammar.y"
{
          // let rInit take care of any errors
          yyval.i=rOrderName(yyvsp[0].name);
        ;
    break;}
case 111:
#line 1037 "grammar.y"
{
            memset(&yyval.lv,0,sizeof(yyval.lv));
            intvec *iv = new intvec(2);
            (*iv)[0] = 1;
            (*iv)[1] = yyvsp[0].i;
            yyval.lv.rtyp = INTVEC_CMD;
            yyval.lv.data = (void *)iv;
          ;
    break;}
case 112:
#line 1046 "grammar.y"
{
            memset(&yyval.lv,0,sizeof(yyval.lv));
            leftv sl = &yyvsp[-1].lv;
            int slLength;
            {
              slLength =  exprlist_length(sl);
              int l = 2 +  slLength;
              intvec *iv = new intvec(l);
              (*iv)[0] = slLength;
              (*iv)[1] = yyvsp[-3].i;

              int i = 2;
              while ((i<l) && (sl!=NULL))
              {
                if (sl->Typ() == INT_CMD)
                {
                  (*iv)[i++] = (int)((long)(sl->Data()));
                }
                else if ((sl->Typ() == INTVEC_CMD)
                ||(sl->Typ() == INTMAT_CMD))
                {
                  intvec *ivv = (intvec *)(sl->Data());
                  int ll = 0,l = ivv->length();
                  for (; l>0; l--)
                  {
                    (*iv)[i++] = (*ivv)[ll++];
                  }
                }
                else
                {
                  delete iv;
                  yyvsp[-1].lv.CleanUp();
                  MYYERROR("wrong type in ordering");
                }
                sl = sl->next;
              }
              yyval.lv.rtyp = INTVEC_CMD;
              yyval.lv.data = (void *)iv;
            }
            yyvsp[-1].lv.CleanUp();
          ;
    break;}
case 114:
#line 1092 "grammar.y"
{
            yyval.lv = yyvsp[-2].lv;
            yyval.lv.next = (sleftv *)omAllocBin(sleftv_bin);
            memcpy(yyval.lv.next,&yyvsp[0].lv,sizeof(sleftv));
          ;
    break;}
case 116:
#line 1102 "grammar.y"
{
            yyval.lv = yyvsp[-1].lv;
          ;
    break;}
case 117:
#line 1108 "grammar.y"
{
            expected_parms = TRUE;
          ;
    break;}
case 118:
#line 1120 "grammar.y"
{ if (yyvsp[-1].i != '<') YYERROR;
            if((feFilePending=feFopen(yyvsp[0].name,"r",NULL,TRUE))==NULL) YYERROR; ;
    break;}
case 119:
#line 1123 "grammar.y"
{ newFile(yyvsp[-2].name,feFilePending); ;
    break;}
case 120:
#line 1128 "grammar.y"
{
            feHelp(yyvsp[-1].name);
            omFree((ADDRESS)yyvsp[-1].name);
          ;
    break;}
case 121:
#line 1133 "grammar.y"
{
            feHelp(NULL);
          ;
    break;}
case 122:
#line 1140 "grammar.y"
{
            singular_example(yyvsp[-1].name);
            omFree((ADDRESS)yyvsp[-1].name);
          ;
    break;}
case 123:
#line 1148 "grammar.y"
{
#ifdef HAVE_NS
          if (basePack!=yyvsp[0].lv.req_packhdl)
          {
            if(iiExport(&yyvsp[0].lv,0,currPackHdl)) YYERROR;
          }
          else
#endif /* HAVE_NS */
            if (iiExport(&yyvsp[0].lv,0)) YYERROR;
        ;
    break;}
case 124:
#line 1162 "grammar.y"
{
          leftv v=&yyvsp[0].lv;
          if (v->rtyp!=IDHDL)
          {
            if (v->name!=NULL)
            {
               Werror("`%s` is undefined in kill",v->name);
            }
            else               WerrorS("kill what ?");
          }
          else
          {
            #ifdef HAVE_NS
            killhdl((idhdl)v->data,v->req_packhdl);
            #else
            killhdl((idhdl)v->data);
            #endif
          }
        ;
    break;}
case 125:
#line 1182 "grammar.y"
{
          leftv v=&yyvsp[0].lv;
          if (v->rtyp!=IDHDL)
          {
            if (v->name!=NULL)
            {
               Werror("`%s` is undefined in kill",v->name);
            }
            else               WerrorS("kill what ?");
          }
          else
          {
            #ifdef HAVE_NS
            killhdl((idhdl)v->data,v->req_packhdl);
            #else
            killhdl((idhdl)v->data);
            #endif
          }
        ;
    break;}
case 126:
#line 1205 "grammar.y"
{
            list_cmd(yyvsp[-1].i,NULL,"// ",TRUE);
          ;
    break;}
case 127:
#line 1209 "grammar.y"
{
            list_cmd(yyvsp[-1].i,NULL,"// ",TRUE);
          ;
    break;}
case 128:
#line 1213 "grammar.y"
{
            if (yyvsp[-1].i==QRING_CMD) yyvsp[-1].i=RING_CMD;
            list_cmd(yyvsp[-1].i,NULL,"// ",TRUE);
          ;
    break;}
case 129:
#line 1218 "grammar.y"
{
            list_cmd(yyvsp[-1].i,NULL,"// ",TRUE);
          ;
    break;}
case 130:
#line 1222 "grammar.y"
{
            list_cmd(RING_CMD,NULL,"// ",TRUE);
          ;
    break;}
case 131:
#line 1226 "grammar.y"
{
            list_cmd(MATRIX_CMD,NULL,"// ",TRUE);
           ;
    break;}
case 132:
#line 1230 "grammar.y"
{
            list_cmd(INTMAT_CMD,NULL,"// ",TRUE);
          ;
    break;}
case 133:
#line 1234 "grammar.y"
{
            list_cmd(PROC_CMD,NULL,"// ",TRUE);
          ;
    break;}
case 134:
#line 1238 "grammar.y"
{
            list_cmd(0,yyvsp[-1].lv.Fullname(),"// ",TRUE);
            yyvsp[-1].lv.CleanUp();
          ;
    break;}
case 135:
#line 1243 "grammar.y"
{
#ifdef HAVE_NS
            //PrintS("?????\n");
            if(yyvsp[-3].lv.Typ() == PACKAGE_CMD)
              list_cmd(yyvsp[-1].i,NULL,"// ",TRUE);
#endif /* HAVE_NS */
            yyvsp[-3].lv.CleanUp();
          ;
    break;}
case 136:
#line 1252 "grammar.y"
{
#ifdef HAVE_NS
            //PrintS("?????\n");
            if(yyvsp[-3].lv.Typ() == PACKAGE_CMD)
              list_cmd(yyvsp[-1].i,NULL,"// ",TRUE);
#endif /* HAVE_NS */
            yyvsp[-3].lv.CleanUp();
          ;
    break;}
case 137:
#line 1261 "grammar.y"
{
#ifdef HAVE_NS
            //PrintS("?????\n");
            if(yyvsp[-3].lv.Typ() == PACKAGE_CMD)
              list_cmd(yyvsp[-1].i,NULL,"// ",TRUE);
#endif /* HAVE_NS */
            yyvsp[-3].lv.CleanUp();
          ;
    break;}
case 138:
#line 1270 "grammar.y"
{
#ifdef HAVE_NS
            //PrintS("?????\n");
            if(yyvsp[-3].lv.Typ() == PACKAGE_CMD)
              list_cmd(yyvsp[-1].i,NULL,"// ",TRUE);
#endif /* HAVE_NS */
            yyvsp[-3].lv.CleanUp();
          ;
    break;}
case 139:
#line 1279 "grammar.y"
{
#ifdef HAVE_NS
            //PrintS("?????\n");
            if(yyvsp[-3].lv.Typ() == PACKAGE_CMD)
              list_cmd(yyvsp[-1].i,NULL,"// ",TRUE);
#endif /* HAVE_NS */
            yyvsp[-3].lv.CleanUp();
          ;
    break;}
case 140:
#line 1288 "grammar.y"
{
#ifdef HAVE_NS
            //PrintS("?????\n");
            if(yyvsp[-3].lv.Typ() == PACKAGE_CMD)
              list_cmd(yyvsp[-1].i,NULL,"// ",TRUE);
#endif /* HAVE_NS */
            yyvsp[-3].lv.CleanUp();
          ;
    break;}
case 141:
#line 1297 "grammar.y"
{
#ifdef HAVE_NS
            //PrintS("?????\n");
            if(yyvsp[-3].lv.Typ() == PACKAGE_CMD)
              list_cmd(yyvsp[-1].i,NULL,"// ",TRUE);
#endif /* HAVE_NS */
            yyvsp[-3].lv.CleanUp();
          ;
    break;}
case 142:
#line 1306 "grammar.y"
{
#ifdef HAVE_NS
            //PrintS("?????\n");
            if(yyvsp[-3].lv.Typ() == PACKAGE_CMD)
              list_cmd(yyvsp[-1].i,NULL,"// ",TRUE);
#endif /* HAVE_NS */
            yyvsp[-3].lv.CleanUp();
          ;
    break;}
case 143:
#line 1324 "grammar.y"
{
            list_cmd(-1,NULL,"// ",TRUE);
          ;
    break;}
case 144:
#line 1330 "grammar.y"
{ yyInRingConstruction = TRUE; ;
    break;}
case 145:
#line 1339 "grammar.y"
{
            BOOLEAN do_pop = FALSE;
            char *ring_name = yyvsp[-6].lv.name;
            ring b=
            rInit(&yyvsp[-4].lv,            /* characteristik and list of parameters*/
                  &yyvsp[-2].lv,            /* names of ringvariables */
                  &yyvsp[0].lv);            /* ordering */
            idhdl newRingHdl=NULL;

            if (b!=NULL)
            {
              #ifdef HAVE_NS
                newRingHdl=enterid(ring_name, myynest, RING_CMD, 
                                   &(yyvsp[-6].lv.req_packhdl->idroot));
              #else
                newRingHdl=enterid(ring_name, myynest, RING_CMD, &IDROOT);
              #endif
              yyvsp[-6].lv.CleanUp();
              if (newRingHdl!=NULL)
              {
                omFreeSize(IDRING(newRingHdl),sizeof(ip_sring));
                IDRING(newRingHdl)=b;
              }
              else
              {
                rKill(b);
              }
            }
            yyInRingConstruction = FALSE;
            if (newRingHdl==NULL)
            {
              MYYERROR("cannot make ring");
            }
            else
            {
              rSetHdl(newRingHdl);
            }
          ;
    break;}
case 146:
#line 1378 "grammar.y"
{
            BOOLEAN do_pop = FALSE;
            char *ring_name = yyvsp[0].lv.name;
            if (!inerror) rDefault(ring_name);
            yyInRingConstruction = FALSE;
            yyvsp[0].lv.CleanUp();
          ;
    break;}
case 147:
#line 1389 "grammar.y"
{
            if ((yyvsp[-1].i!=LIB_CMD)||(iiLibCmd(yyvsp[0].name,TRUE,TRUE,TRUE)))
            //if ($1==LIB_CMD)
            //{
            //  sleftv tmp;
            //  if(iiExprArith1(&tmp,&$2,LIB_CMD)) YYERROR;
            //}
            //else
                YYERROR;
          ;
    break;}
case 150:
#line 1405 "grammar.y"
{
            if ((yyvsp[-1].i==KEEPRING_CMD) && (myynest==0))
               MYYERROR("only inside a proc allowed");
            const char * n=yyvsp[0].lv.Name();
            if (((yyvsp[0].lv.Typ()==RING_CMD)||(yyvsp[0].lv.Typ()==QRING_CMD))
            && (yyvsp[0].lv.rtyp==IDHDL))
            {
              idhdl h=(idhdl)yyvsp[0].lv.data;
              if (yyvsp[0].lv.e!=NULL) h=rFindHdl((ring)yyvsp[0].lv.Data(),NULL, NULL);
              //Print("setring %s lev %d (ptr:%x)\n",IDID(h),IDLEV(h),IDRING(h));
              if (yyvsp[-1].i==KEEPRING_CMD)
              {
                if (h!=NULL)
                {
                  if (IDLEV(h)!=0)
                  {
                    if (iiExport(&yyvsp[0].lv,myynest-1)) YYERROR;
#if 1
                    //if (TEST_OPT_KEEPVARS)
                    //{
                      idhdl p=IDRING(h)->idroot;
                      idhdl root=p;
                      int prevlev=myynest-1;
                      while (p!=NULL)
                      {
                        if (IDLEV(p)==myynest)
                        {
                          idhdl old=root->get(IDID(p),prevlev);
                          if (old!=NULL)
                          {
                            if (BVERBOSE(V_REDEFINE))
                              Warn("redefining %s",IDID(p));
                            killhdl2(old,&root,IDRING(h));
                            IDRING(h)->idroot=root;
                          }
                          IDLEV(p)=prevlev;
                        }
                        p=IDNEXT(p);
                      }
                      //IDRING(h)->idroot=root;
#endif
                    //}
                  }
#ifdef USE_IILOCALRING
                  iiLocalRing[myynest-1]=IDRING(h);
#endif
                  procstack->cRing=IDRING(h);
                  procstack->cRingHdl=h;
                }
                else
                {
                  Werror("%s is no identifier",n);
                  yyvsp[0].lv.CleanUp();
                  YYERROR;
                }
              }
              if (h!=NULL) rSetHdl(h);
              else
              {
                Werror("cannot find the name of the basering %s",n);
                yyvsp[0].lv.CleanUp();
                YYERROR;
              }
              yyvsp[0].lv.CleanUp();
            }
            else
            {
              Werror("%s is no name of a ring/qring",n);
              yyvsp[0].lv.CleanUp();
              YYERROR;
            }
          ;
    break;}
case 151:
#line 1481 "grammar.y"
{
            if (yyvsp[0].lv.rtyp!=IDHDL) MYYERROR("identifier expected");
            idhdl h = (idhdl)yyvsp[0].lv.data;
            type_cmd(h);
          ;
    break;}
case 152:
#line 1487 "grammar.y"
{
            //Print("typ is %d, rtyp:%d\n",$1.Typ(),$1.rtyp);
            #ifdef SIQ
            if (yyvsp[0].lv.rtyp!=COMMAND)
            {
            #endif
              if (yyvsp[0].lv.Typ()==UNKNOWN)
              {
                if (yyvsp[0].lv.name!=NULL)
                {
                  Werror("`%s` is undefined",yyvsp[0].lv.name);
                  omFree((ADDRESS)yyvsp[0].lv.name);
                }
                YYERROR;
              }
            #ifdef SIQ
            }
            #endif
            yyvsp[0].lv.Print(&sLastPrinted);
            yyvsp[0].lv.CleanUp(currRing);
            if (errorreported) YYERROR;
          ;
    break;}
case 153:
#line 1516 "grammar.y"
{
            int i; TESTSETINT(yyvsp[-2].lv,i);
            if (i!=0)
            {
              newBuffer( yyvsp[0].name, BT_if);
            }
            else
            {
              omFree((ADDRESS)yyvsp[0].name);
              currentVoice->ifsw=1;
            }
          ;
    break;}
case 154:
#line 1529 "grammar.y"
{
            if (currentVoice->ifsw==1)
            {
              currentVoice->ifsw=0;
              newBuffer( yyvsp[0].name, BT_else);
            }
            else
            {
              if (currentVoice->ifsw!=2)
              {
                Warn("`else` without `if` in level %d",myynest);
              }
              omFree((ADDRESS)yyvsp[0].name);
            }
            currentVoice->ifsw=0;
          ;
    break;}
case 155:
#line 1546 "grammar.y"
{
            int i; TESTSETINT(yyvsp[-2].lv,i);
            if (i)
            {
              if (exitBuffer(BT_break)) YYERROR;
            }
            currentVoice->ifsw=0;
          ;
    break;}
case 156:
#line 1555 "grammar.y"
{
            if (exitBuffer(BT_break)) YYERROR;
            currentVoice->ifsw=0;
          ;
    break;}
case 157:
#line 1560 "grammar.y"
{
            if (contBuffer(BT_break)) YYERROR;
            currentVoice->ifsw=0;
          ;
    break;}
case 158:
#line 1568 "grammar.y"
{
            /* -> if(!$2) break; $3; continue;*/
            char * s = (char *)omAlloc( strlen(yyvsp[-1].name) + strlen(yyvsp[0].name) + 36);
            sprintf(s,"whileif (!(%s)) break;\n%scontinue;\n " ,yyvsp[-1].name,yyvsp[0].name);
            newBuffer(s,BT_break);
            omFree((ADDRESS)yyvsp[-1].name);
            omFree((ADDRESS)yyvsp[0].name);
          ;
    break;}
case 159:
#line 1580 "grammar.y"
{
            /* $2 */
            /* if (!$3) break; $5; $4; continue; */
            char * s = (char *)omAlloc( strlen(yyvsp[-2].name)+strlen(yyvsp[-1].name)+strlen(yyvsp[0].name)+36);
            sprintf(s,"forif (!(%s)) break;\n%s%s;\ncontinue;\n "
                   ,yyvsp[-2].name,yyvsp[0].name,yyvsp[-1].name);
            omFree((ADDRESS)yyvsp[-2].name);
            omFree((ADDRESS)yyvsp[-1].name);
            omFree((ADDRESS)yyvsp[0].name);
            newBuffer(s,BT_break);
            s = (char *)omAlloc( strlen(yyvsp[-3].name) + 3);
            sprintf(s,"%s;\n",yyvsp[-3].name);
            omFree((ADDRESS)yyvsp[-3].name);
            newBuffer(s,BT_if);
          ;
    break;}
case 160:
#line 1599 "grammar.y"
{
            procinfov pi;
            idhdl h = enterid(yyvsp[-1].name,myynest,PROC_CMD,&IDROOT,TRUE);
            if (h==NULL) {omFree((ADDRESS)yyvsp[-1].name);omFree((ADDRESS)yyvsp[0].name); YYERROR;}
            iiInitSingularProcinfo(IDPROC(h),"", yyvsp[-1].name, 0, 0);
            IDPROC(h)->data.s.body = (char *)omAlloc(strlen(yyvsp[0].name)+31);;
            sprintf(IDPROC(h)->data.s.body,"parameter list #;\n%s;return();\n\n",yyvsp[0].name);
            omFree((ADDRESS)yyvsp[0].name);
            omFree((ADDRESS)yyvsp[-1].name);
          ;
    break;}
case 161:
#line 1610 "grammar.y"
{
            idhdl h = enterid(yyvsp[-2].name,myynest,PROC_CMD,&IDROOT,TRUE);
            if (h==NULL)
            {
              omFree((ADDRESS)yyvsp[-2].name);
              omFree((ADDRESS)yyvsp[-1].name);
              omFree((ADDRESS)yyvsp[0].name);
              YYERROR;
            }
            char *args=iiProcArgs(yyvsp[-1].name,FALSE);
            omFree((ADDRESS)yyvsp[-1].name);
            procinfov pi;
            iiInitSingularProcinfo(IDPROC(h),"", yyvsp[-2].name, 0, 0);
            IDPROC(h)->data.s.body = (char *)omAlloc(strlen(yyvsp[0].name)+strlen(args)+14);;
            sprintf(IDPROC(h)->data.s.body,"%s\n%s;return();\n\n",args,yyvsp[0].name);
            omFree((ADDRESS)args);
            omFree((ADDRESS)yyvsp[0].name);
            omFree((ADDRESS)yyvsp[-2].name);
          ;
    break;}
case 162:
#line 1630 "grammar.y"
{
            omFree((ADDRESS)yyvsp[-1].name);
            idhdl h = enterid(yyvsp[-3].name,myynest,PROC_CMD,&IDROOT,TRUE);
            if (h==NULL)
            {
              omFree((ADDRESS)yyvsp[-3].name);
              omFree((ADDRESS)yyvsp[-2].name);
              omFree((ADDRESS)yyvsp[0].name);
              YYERROR;
            }
            char *args=iiProcArgs(yyvsp[-2].name,FALSE);
            omFree((ADDRESS)yyvsp[-2].name);
            procinfov pi;
            iiInitSingularProcinfo(IDPROC(h),"", yyvsp[-3].name, 0, 0);
            omFree((ADDRESS)yyvsp[-3].name);
            IDPROC(h)->data.s.body = (char *)omAlloc(strlen(yyvsp[0].name)+strlen(args)+14);;
            sprintf(IDPROC(h)->data.s.body,"%s\n%s;return();\n\n",args,yyvsp[0].name);
            omFree((ADDRESS)args);
            omFree((ADDRESS)yyvsp[0].name);
          ;
    break;}
case 163:
#line 1654 "grammar.y"
{
            //Print("par:%s, %d\n",$2.Name(),$2.Typ());
            //yylineno--;
            if (iiParameter(&yyvsp[0].lv)) YYERROR;
          ;
    break;}
case 164:
#line 1660 "grammar.y"
{
            //Print("par:%s, %d\n",$2.Name(),$2.Typ());
            sleftv tmp_expr;
            //yylineno--;
            if ((iiDeclCommand(&tmp_expr,&yyvsp[0].lv,myynest,DEF_CMD,&IDROOT))
            || (iiParameter(&tmp_expr)))
              YYERROR;
          ;
    break;}
case 165:
#line 1672 "grammar.y"
{
            if(iiRETURNEXPR==NULL) YYERROR;
            iiRETURNEXPR[myynest].Copy(&yyvsp[-1].lv);
            yyvsp[-1].lv.CleanUp();
            if (exitBuffer(BT_proc)) YYERROR;
          ;
    break;}
case 166:
#line 1679 "grammar.y"
{
            if (yyvsp[-2].i==RETURN)
            {
              if(iiRETURNEXPR==NULL) YYERROR;
              iiRETURNEXPR[myynest].Init();
              iiRETURNEXPR[myynest].rtyp=NONE;
              if (exitBuffer(BT_proc)) YYERROR;
            }
          ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1689 "grammar.y"
