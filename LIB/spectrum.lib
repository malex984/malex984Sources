///////////////////////////////////////////////////////////////////////////////
version="$Id: spectrum.lib,v 1.16 2001-08-27 14:48:00 Singular Exp $";
category="Singularities";
info="
LIBRARY:  spectrum.lib  Singularity Spectrum for Nondegenerate Singularities
AUTHOR:   S. Endrass

PROCEDURES:
 spectrumnd(poly f[,1]);  spectrum of nondegenerate isolated singularity f
";

///////////////////////////////////////////////////////////////////////////////

proc spectrumnd (poly f,list #)
"USAGE:    spectrumnd(f[,1]); poly f
ASSUME:   basering has characteristic 0 and local ordering,
          f has isolated singularity at 0 and nondegenerate principal part
RETURN:
@format
list S:
  ideal S[1]: spectral numbers in increasing order
  intvec S[2]:
    int S[2][i]: multiplicity of spectral number S[1][i]
@end format
NOTE:     if a second argument 1 is given,
          no test for a degenerate principal part will be done
SEE_ALSO: gaussman_lib
KEYWORDS: singularities; Gauss-Manin connection; spectrum
EXAMPLE:  example spectrumnd; shows an example
"
{
  if(charstr(basering)!="0")
  {
    ERROR("characteristic 0 expected");
  }
  if(size(#)==0)
  {
    list S=system("spectrum",f);
  }
  else
  {
    list S=system("spectrum",f,#[1]);
  }
  ideal a=number(S[4][1])/S[5][1]-1;
  int i;
  for(i=S[3];i>1;i--)
  {
    a[i]=number(S[4][i])/S[5][i]-1;
  }
  return(list(a,S[6]));
}
example
{ "EXAMPLE:"; echo = 2;
  ring R=0,(x,y),ds;
  poly f=x^31+x^6*y^7+x^2*y^12+x^13*y^2+y^29;
  spectrumnd(f);
}
///////////////////////////////////////////////////////////////////////////////

proc semicont(list #)
{
  ERROR("semicont was replaced by spsemicont in gaussman.lib");
}
///////////////////////////////////////////////////////////////////////////////

proc semicontqh(list #)
{
  ERROR("semicontqh was replaced by spsemicont in gaussman.lib");
}
///////////////////////////////////////////////////////////////////////////////

proc spadd(list s1, list s2)
"USAGE:   spadd(s1,s2); list s1, s2
RETURN:  a list containing the sum of the two spectra s1 and s2
EXAMPLE: example spadd; shows an example
"
{
  return (system("spadd",s1,s2));
}
example
{ "EXAMPLE:"; echo = 2;
  ring r=0,(x,y),ds;
  list s1=spectrumnd(x5+x2y2+y5);
  s1;
  list s2=spectrumnd(x2+y3);
  s2;
  spadd(s1,s2);
}
///////////////////////////////////////////////////////////////////////////////

proc spmul(list s, int k)
"USAGE:   spmul(s,k); list s, int k
RETURN:  a list containing the product of the spectrum s with the integer k
EXAMPLE: example spmul; shows an example
"
{
  return (system("spmul",s,k));
}
example
{ "EXAMPLE:"; echo = 2;
  ring r=0,(x,y),ds;
  list s=spectrumnd(x5+x2y2+y5);
  s;
  spmul(s,2);
>>>>>>> 1.12.2.1
}
///////////////////////////////////////////////////////////////////////////////
